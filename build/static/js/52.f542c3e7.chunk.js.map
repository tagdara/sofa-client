{"version":3,"sources":["LightbulbOutline.js","SofaSlider.js","GridSection.js","light/LightSliderBrightness.js","light/LightSliderTemperature.js","light/LightSliderColor.js","light/Light.js","Scene.js","SceneAdd.js","AreaLayout.js"],"names":["LightbulbOutlineIcon","props","d","muiName","useStyles","makeStyles","half","alignItems","display","height","flexGrow","flexBasis","boxSizing","stack","justifyContent","flexWrap","width","marginRight","overflowX","overflowY","paddingRight","padLeft","paddingLeft","slider","margin","SofaSlider","classes","useState","value","setValue","useEffect","style","minWidth","className","name","variant","smallText","stackLabel","unit","Array","isArray","Math","floor","step","min","max","onChange","event","preChange","onChangeCommitted","change","disabled","defaultProps","default","tabs","theme","gridColumn","alignContent","padding","backgroundColor","palette","background","page","borderRadius","nopad","GridSection","isMobile","useContext","LayoutContext","container","item","spacing","key","xs","primary","break","secondary","children","indent","LightSliderBrightness","device","BrightnessController","brightness","directive","PowerController","powerState","LightSliderTemperature","ColorTemperatureController","colorTemperatureInKelvin","wide","button","revealIcon","color","sl2sb","h","SL","s","l","SB","hue","saturation","t","sb2sl","LightSliderColor","reveal","setColor","ColorController","onChangeComplete","hsl","sendsb","size","onClick","hsb","iconSize","tile","sliderPaper","flexDirection","nostack","maxWidth","lightSwitch","marginLeft","lightbar","placeholder","listItem","maxHeight","Light","showAll","setShowAll","isReachable","hasOwnProperty","EndpointHealth","connectivity","console","log","e","nopaper","thinmargin","noback","avatarState","friendlyName","checked","target","brightControl","tempControl","colorControl","root","minHeight","working","Scene","setWorking","computedLevel","scene","SceneController","endpointId","shortcut","remove","newName","setNewName","id","label","area","AreaController","setNewScene","dialogActions","paddingBottom","listDialogContent","buttonspacer","AreaLayout","deviceByEndpointId","DataContext","layout","edit","setEdit","filter","setFilter","setBrightControl","setTempControl","setColorControl","newScene","childrenByArea","ads","i","length","dev","displayCategories","includes","push","nameSort","a","b","isAShortcut","shortcuts","indexOf","Fragment","smallicon","lights","all","toUpperCase","sort","j","filterByType","map","fontSize","outscenes","allscenes","shortcutlist","reverse","sortByShortcuts"],"mappings":"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","file":"static/js/52.f542c3e7.chunk.js","sourcesContent":["/* eslint-disable max-len */\n\nimport React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nfunction LightbulbOutlineIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <path d=\"M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z\" />\n    </SvgIcon>\n  );\n}\n\nLightbulbOutlineIcon.muiName = 'SvgIcon';\n\nexport default LightbulbOutlineIcon;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n         \n    half: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: 42,\n        flexGrow: 1,\n        flexBasis: 0,\n        boxSizing: \"border-box\",\n    },\n    stack: {\n        height: \"auto\",\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        marginRight: 8,\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n        alignItems: \"center\",\n        paddingRight: 8,\n    },\n    padLeft: {\n        paddingLeft: 16,\n    },\n    slider: {\n        margin: \"-18px\"\n    }\n\n});\n\nexport default function SofaSlider(props) {\n    \n    const classes = useStyles();\n    const [value, setValue] = useState(0)\n    \n    useEffect(() => {\n        if (props.value) {\n            setValue(props.value)\n        }\n    }, [props.value]);\n\n    \n    function handlePreChange(event, value) {\n        setValue(value);\n        if (props.preChange) {\n            props.preChange(value);\n        }\n    }; \n\n    function handleChange(event,value) {\n        props.change(value);\n    }; \n   \n    function unitDisplay() {\n        if (Array.isArray(value)) {\n            return Math.floor(value[0])+' - '+ Math.floor(value[1])+props.unit\n        } else {\n            return Math.floor(value)+props.unit\n        }\n    }\n   \n    return (\n        <div style={{ \"minWidth\": props.minWidth }} className={ props.padLeft ? classes.stack+\" \"+classes.padLeft: ( props.half ? classes.half : classes.stack) } >\n        { props.name ?\n            <Typography variant={ props.smallText ? \"caption\" : \"subtitle1\" } className={classes.stackLabel} >{props.name}</Typography>\n        :   null }\n        { props.unit ?\n            <Typography variant=\"caption\" className={classes.stackLabel} >{unitDisplay()}</Typography>\n        : null }\n            <Slider\n                value={value} step={props.step} \n                min={props.min} max={props.max}\n                onChange={handlePreChange}\n                onChangeCommitted={handleChange}\n                disabled={props.disabled}\n            />\n        </div>\n    );\n}\n\nSofaSlider.defaultProps = {\n    name: '',\n    unit: '',\n    min: 0,\n    max: 100,\n    step: 1,\n    default: 0,\n    value: 0,\n    tabs: '',\n    disabled: false,\n    padLeft: false,\n    half: false,\n    minWidth: 240,\n    smallText: false,\n}\n\n\n","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { LayoutContext } from './layout/NewLayoutProvider';\n\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nconst useStyles = makeStyles(theme => {\n    return {\n        gridColumn: {\n            margin: 1,\n            overflowX: \"hidden\",\n            overflowY: \"hidden\",\n            alignContent: \"start\",\n            padding: \"3px !important\",\n            backgroundColor: theme.palette.background.page,\n            borderRadius: \"4px 4px 4px 4px\",\n        },\n        nopad: {\n            padding: 0,\n        }\n    }\n});\n\n\nexport default function GridSection(props) {\n    \n    const { isMobile } = useContext(LayoutContext);\n    const classes = useStyles();\n\n    return (\n        <Grid container item spacing={1} key={props.name} xs={12} className={ classes.gridColumn}>\n            {props.name &&\n                <Grid item xs={12} className={classes.nopad}>\n                <List className={classes.nopad}>\n                    <ListItem>\n                        <ListItemText primary={props.name} />\n                        { (!isMobile || !props.break) &&\n                            <ListItemSecondaryAction>\n                                {props.secondary}\n                            </ListItemSecondaryAction>\n                        }\n                    </ListItem>\n                    { (isMobile && props.break) &&\n                        <ListItem>\n                            <ListItemSecondaryAction>\n                                {props.secondary}\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    }\n                </List>\n                </Grid>\n            }\n            {props.children}\n        </Grid>\n    );\n}\n\nGridSection.defaultProps = {\n    break: false\n}\n \n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport SofaSlider from '../SofaSlider';\nimport BrightnessLowIcon from '@material-ui/icons/BrightnessLow';\n\nconst useStyles = makeStyles({\n        \n    indent: {\n        paddingLeft: 40,\n        paddingRight: 8,\n    }\n});\n\nexport default function LightSliderBrightness(props) {\n    \n    const classes = useStyles();\n\n    function handleBrightnessChange(event) {\n        props.device.BrightnessController.directive('SetBrightness', { \"brightness\" : event })\n    }; \n\n    return (\n            <ListItem>\n                <ListItemIcon className={classes.indent}><BrightnessLowIcon /></ListItemIcon>\n                <SofaSlider\n                    name=\"Brightness\" smallText={true} value={props.device.BrightnessController.brightness.value} unit=\"%\"\n                    min={0} max={100} step={10}\n                    change={handleBrightnessChange}\n                    disabled={!props.device.PowerController.powerState.value}\n                />\n            </ListItem>\n    );\n}\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport SofaSlider from '../SofaSlider';\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\n\nconst useStyles = makeStyles({\n        \n    indent: {\n        paddingLeft: 40,\n        paddingRight: 8,\n    }\n});\n\nexport default function LightSliderTemperature(props) {\n\n    const classes = useStyles();\n\n    function handleColorTemperatureChange(value) {\n        props.device.ColorTemperatureController.directive('SetColorTemperature', { \"colorTemperatureInKelvin\": value} )\n    }; \n\n    return (\n        <ListItem>\n            <ListItemIcon className={classes.indent}><AcUnitIcon /></ListItemIcon>\n            <SofaSlider\n                name=\"Temperature\" smallText={true} unit={\"°\"}\n                value={props.device.ColorTemperatureController.colorTemperatureInKelvin.value}\n                min={2000} max={7000} step={100}\n                change={handleColorTemperatureChange}\n                disabled={!props.powerState}\n            />\n        </ListItem>\n    );\n\n}\n\n\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Button from '@material-ui/core/Button';\n\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\nimport LensIcon from '@material-ui/icons/Lens';\n\nimport { HuePicker } from 'react-color';\n\nconst useStyles = makeStyles({\n        \n    wide: {\n        width: \"100%\",\n    },\n    indent: {\n        paddingLeft: 40,\n        paddingRight: 8,\n    },\n    button: {\n        minWidth: 24\n    },\n    revealIcon: {\n        height: 24,\n        width: 24,\n        color: \"FFE4B5\",\n    }\n});\n\nexport const sl2sb = (color) => {\n    var SL = {h:color.h, s:color.s, l:color.l};\n    var SB = {hue:color.h, saturation:0, brightness:0};\n    var t = SL.s * (SL.l<0.5 ? SL.l : 1-SL.l);\n    SB.brightness = SL.l+t;\n    SB.saturation = SL.l>0 ? 2*t/SB.brightness : SB.saturation ;\n    return SB\n}    \n\nexport const sb2sl = (color) => {\n    var SB = {hue:color.hue, saturation:color.saturation, brightness:color.brightness};\n    var SL = {h:color.hue, s:0, l:0};\n    SL.l = (2 - SB.saturation) * SB.brightness / 2;\n    SL.s = SL.l&&SL.l<1 ? SB.saturation*SB.brightness/(SL.l<0.5 ? SL.l*2 : 2-SL.l*2) : SL.s;\n    return SL\n}\n\nexport default function LightSliderColor(props) {\n\n    const classes = useStyles();\n    const reveal = {hue: 43.5, saturation:0.27, brightness: 1}\n    const [color, setColor] = useState(reveal);\n    \n    useEffect(() => {\n        setColor(sb2sl(props.device.ColorController.color.value))\n    }, [props.device.ColorController.color.value]);\n\n\n    function handleColorSliderChange(color, event) {\n        setColor(color.hsl);\n        var sendsb=sl2sb(color.hsl)\n        sendsb.brightness=props.device.BrightnessController.brightness.value/100\n        props.device.ColorController.directive('SetColor',{ \"color\": sendsb })\n    }\n\n    function handleColorChange(hsb) {\n        setColor(sb2sl(hsb));\n        hsb.brightness=props.device.BrightnessController.brightness.value/100\n        props.device.ColorController.directive('SetColor',{ \"color\": hsb })\n    }\n\n    return (\n        <ListItem>\n            <ListItemIcon className={classes.indent}><ColorLensIcon /></ListItemIcon>\n            <HuePicker\n                className={classes.wide}\n                color={ color }\n                onChangeComplete={ handleColorSliderChange }\n            />\n            <Button size=\"small\" onClick={ () => handleColorChange(reveal)} color={ color===reveal ? \"primary\" : \"default\"} className={classes.button }>\n                <LensIcon className={classes.revealIcon} />\n            </Button>\n        </ListItem>\n    );\n\n}\n\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ToggleAvatar from '../ToggleAvatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Switch from '@material-ui/core/Switch';\nimport LightbulbOutlineIcon from '../LightbulbOutline';\nimport CloudOffIcon from '@material-ui/icons/CloudOff';\nimport LightSliderBrightness from \"./LightSliderBrightness\"\nimport LightSliderTemperature from \"./LightSliderTemperature\"\nimport LightSliderColor from \"./LightSliderColor\"\nimport GridItem from \"../GridItem\"\n\nconst useStyles = makeStyles({\n \n    iconSize: {\n        height: 24,\n        width: 24,\n    },\n    stack: {\n        height: 44,\n        display: \"flex\",\n        flexGrow: 1,\n        paddingLeft: 16,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n    },\n    tile: {\n        display: \"flex\",\n        flexGrow: 1,\n        height: 90,\n        paddingRight: 8,\n    },\n    sliderPaper: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        padding: \"16 8 16 16\",\n        alignItems: \"center\",\n    },\n    nostack: {\n        height: 44,\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        flexWrap: \"wrap\",\n        maxWidth: 480,\n        minWidth: 240,\n        boxSizing: \"border-box\",\n        marginRight: 8,\n    },\n    lightSwitch: {\n        marginLeft: 8,\n    },\n    lightbar: {\n        width: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n    },\n    placeholder: {\n        height: 57,\n        width: \"100%\",\n    },\n    listItem: {\n        maxHeight: 64,\n        width: \"100%\",\n    }\n});\n\nexport default function Light(props) {\n    \n    const classes = useStyles();\n    const [showAll, setShowAll] = useState(false)\n    \n    function handlePowerChange(event){\n        if (event.target.checked) {\n            props.device.PowerController.directive('TurnOn')\n        } else {\n            props.device.PowerController.directive('TurnOff')\n        }\n    }; \n    \n    function isReachable() {\n        try {\n            if (props.device.hasOwnProperty('EndpointHealth')) {\n                if (props.device.EndpointHealth.connectivity.value.value==='OK') { return true }\n                return false\n            }\n            console.log('no endpoint health', props.device)\n            return true\n        } catch (e) {\n            console.log('Error getting reachable state', e)\n            return false\n        }\n    }\n    \n    return (\n        <GridItem nopaper={props.nopaper} xs={props.xs} thinmargin={props.thinmargin} >\n            <ListItem className={classes.listItem} >\n                { isReachable() ?\n                    <ToggleAvatar noback={true} avatarState={props.device.PowerController.powerState.value==='ON' ? \"on\" : \"off\" } >\n                        <LightbulbOutlineIcon className={classes.iconSize} />\n                    </ToggleAvatar>\n                :\n                    <ToggleAvatar avatarState={ \"off\" } >\n                        <CloudOffIcon className={classes.iconSize} />\n                    </ToggleAvatar>\n                }                \n                <ListItemText onClick={() => setShowAll(!showAll) } primary={props.device.friendlyName} secondary={ isReachable() ? '': 'Off at switch' } />\n                { isReachable() &&\n                    <Switch color=\"primary\" className={classes.lightSwitch} checked={props.device.PowerController.powerState.value==='ON'} onChange={handlePowerChange} />\n                }\n            </ListItem>\n            { !props.brightControl && !showAll ? null :\n                ( !props.device.hasOwnProperty('BrightnessController') ?\n                    <ListItem className={classes.placeholder} />\n                :\n                    <LightSliderBrightness device={props.device} />\n                )\n            }\n            { !props.tempControl && !showAll ? null :\n                ( !props.device.hasOwnProperty('ColorTemperatureController') ?\n                    <ListItem className={classes.placeholder} />\n                :\n                <LightSliderTemperature device={props.device}/>\n                )\n            }\n            { !props.colorControl && !showAll ? null :\n                ( !props.device.hasOwnProperty('ColorController') ?\n                    <ListItem className={classes.placeholder} />\n                :\n                    <LightSliderColor device={props.device}/>\n                )\n            }\n        </GridItem>\n    );\n}\n\nLight.defaultProps = {\n    nopaper: false,\n}\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListIcon from '@material-ui/icons/List';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ToggleAvatar from './ToggleAvatar';\nimport GridItem from \"./GridItem\"\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles({\n    \n    root: {\n        minHeight: 72,\n        display: \"flex\",\n        width: \"100%\",\n    },\n    listItem: {\n        padding: \"8 24px\",\n    },\n    working: {\n        margin: \"4px 20px 4px 4px\"\n    }\n});\n\n\nexport default function Scene(props) {\n    \n    const classes = useStyles();\n    const [working, setWorking] = useState(false)\n    \n    useEffect(() => {\n        setWorking(false)\n    }, [props.computedLevel]);\n    \n    function runScene() {\n        console.log('Activating', props.scene.friendlyName)\n        setWorking(true)\n        props.scene.SceneController.directive('Activate')\n    }\n    \n    function deleteScene(endpointId) {\n        props.scene.SceneController.directive(\"Delete\")\n    }\n    \n    return (\n        <GridItem >\n            <ListItem onClick={ () => runScene()}>\n                { working ?\n                    <CircularProgress size={32} className={classes.working} />\n                :\n                    <ToggleAvatar avatarState={props.scene.endpointId===props.computedLevel ? 'on' : 'off'}>\n                        {props.shortcut==='x' ? <ListIcon /> : props.shortcut }\n                    </ToggleAvatar>\n                }\n                <ListItemText>{props.scene.friendlyName}</ListItemText>\n                { props.remove &&\n                    <ListItemSecondaryAction className={classes.listItem}>\n                        <ListItemIcon onClick={() => deleteScene() }><CloseIcon /></ListItemIcon>   \n                    </ListItemSecondaryAction>\n                }\n            </ListItem>\n        </GridItem >\n    )\n};\n\n\n","import React, { useState } from 'react';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListIcon from '@material-ui/icons/List';\nimport ListItemIcon from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport TextField from '@material-ui/core/TextField';\n\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ToggleAvatar from './ToggleAvatar';\nimport GridItem from \"./GridItem\"\n\nexport default function Scene(props) {\n    \n    const [newName, setNewName] = useState('')\n\n    function snapScene(sceneName) {\n        props.area.AreaController.directive(\"Snapshot\", newName)\n        props.setNewScene(false)\n    }\n    \n    const handleChange = name => event => {\n        setNewName(event.target.value)\n    }\n    \n    return (\n        <GridItem >\n            <ListItem>\n                <ToggleAvatar avatarState={'on'} >\n                    <ListIcon />\n                </ToggleAvatar>\n                <TextField id=\"newscene\" label=\"Name\" value={newName} onChange={handleChange('name')} margin=\"normal\"/>\n                <ListItemSecondaryAction>\n                    <ListItemIcon  onClick={() => snapScene(newName) }>\n                        <CheckIcon />\n                    </ListItemIcon>\n                    <ListItemIcon  onClick={() => props.setNewScene(false) }>\n                        <CloseIcon />\n                    </ListItemIcon>\n                </ListItemSecondaryAction>\n            </ListItem>\n        </GridItem >\n    )\n};","import React, {useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { LayoutContext } from './layout/NewLayoutProvider';\nimport { DataContext } from './DataContext/DataProvider';\n\nimport Button from '@material-ui/core/Button';\nimport Light from './light/Light';\nimport GridSection from './GridSection';\n\nimport Scene from './Scene'\nimport SceneAdd from './SceneAdd'\n\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\nimport BrightnessLowIcon from '@material-ui/icons/BrightnessLow';\nimport CameraIcon from '@material-ui/icons/Camera';\n\n\nconst useStyles = makeStyles({\n    \n    dialogActions: {\n        paddingBottom: \"env(safe-area-inset-bottom)\",\n    },\n    listDialogContent: {\n        padding: 0,\n    },\n    button: {\n        minWidth: 36\n    },\n    buttonspacer: {\n        minWidth: 36,\n        marginRight: 18\n    },\n\n});\n\nexport default function AreaLayout(props) {\n\n    const classes = useStyles();\n    const { deviceByEndpointId } = useContext(DataContext);\n    const { layout } = useContext(LayoutContext);\n    \n    const [edit, setEdit] = useState(false)\n    const [filter, setFilter] = useState('ALL');\n    const [brightControl, setBrightControl] = useState(false)\n    const [tempControl, setTempControl] = useState(false)\n    const [colorControl, setColorControl] = useState(false)\n    const [newScene, setNewScene] = useState(false);\n    const area = deviceByEndpointId('logic:area:'+layout.props.name)\n\n    function childrenByArea(filter) {\n\n        var ads=[]\n        try {\n            var children=area.AreaController.children.value\n            for (var i = 0; i < children.length; i++) {\n                var dev=deviceByEndpointId(children[i])\n                if (!filter || filter==='ALL' || (dev && dev.displayCategories.includes(filter))) {\n                    ads.push(dev)\n                }\n            }\n            return ads    \n        } catch (e) {\n            console.log('Error getting children by area', e)\n        } finally {\n            return ads\n        }\n}\n\n    function nameSort(a,b) {\n      if (a.friendlyName < b.friendlyName)\n        return -1;\n      if (a.friendlyName > b.friendlyName)\n        return 1;\n      return 0;\n    }\n\n    function filterByType(filter) {\n        var lights=[]\n        var all=childrenByArea('LIGHT')\n        if (filter.toUpperCase()===\"ALL\") { \n            return all.sort(nameSort) \n        }\n        for (var j = 0; j < all.length; j++) {\n            if (all[j].PowerController.powerState.value===filter.toUpperCase()) {\n                lights.push(all[j])\n            }\n        }\n        return lights.sort(nameSort)\n    }\n\n    function isAShortcut(scene) {\n        if (area.AreaController.shortcuts.value.indexOf(scene) >= 0) {\n            return area.AreaController.shortcuts.value.indexOf(scene)\n        } else {\n            return 'x'\n        }\n    }\n\n    function sortByShortcuts() {\n\n        var outscenes=[]\n        try {\n            var allscenes=childrenByArea('SCENE_TRIGGER')\n            var shortcutlist=[...area.AreaController.shortcuts.value].reverse()\n            for (var j = 0; j < shortcutlist.length; j++) {\n                outscenes.push(deviceByEndpointId(shortcutlist[j]))\n            }\n    \n            for (j = 0; j < allscenes.length; j++) {\n                if (!shortcutlist.includes(allscenes[j].endpointId)) {\n                    outscenes.push(allscenes[j])\n                }\n            }\n        } catch (e) {\n            console.log('Error getting children by area', e)\n        } finally {\n            return outscenes\n        }\n    }\n    \n    return (    \n        <React.Fragment>\n            <GridSection name={layout.props.name+\" Lights\"} break={true}\n                    secondary={\n                        <>\n                            <Button onClick={ () => setBrightControl(!brightControl) } color={ brightControl ? \"primary\" : \"default\"} className={classes.button }>\n                                <BrightnessLowIcon className={classes.smallicon } />\n                            </Button>\n                            <Button onClick={ () => setTempControl(!tempControl) } color={ tempControl ? \"primary\" : \"default\"} className={classes.button }>\n                                <AcUnitIcon className={classes.smallicon } />\n                            </Button>\n                            <Button onClick={ () => setColorControl(!colorControl) } color={ colorControl ? \"primary\" : \"default\"} className={classes.buttonspacer }>\n                                <ColorLensIcon className={classes.smallicon } />\n                            </Button>\n            \n                            <Button onClick={ () => setFilter('ALL')} color={ filter==='ALL' ? \"primary\" : \"default\"} className={classes.button }>\n                                All\n                            </Button>\n                            <Button onClick={ () => setFilter('ON')} color={ filter==='ON' ? \"primary\" : \"default\"} className={classes.button }>\n                                On\n                            </Button>\n                        </>\n                    } \n            >\n                { filterByType(filter).map(device =>\n                    <Light key={ device.endpointId } device={ device }\n                        brightControl={brightControl} tempControl={tempControl} colorControl={colorControl}\n                    />\n                )}\n            </GridSection>\n            <GridSection name={\"Scenes\"} secondary={\n                <>\n                    <IconButton onClick={ () => setEdit(!edit) } className={classes.button }><RemoveIcon fontSize=\"small\" /></IconButton> \n                    <IconButton onClick={ () => setNewScene(true) } className={classes.button }><CameraIcon fontSize=\"small\" /></IconButton> \n                </>\n            }>\n                { newScene && <SceneAdd area={area} setNewScene={setNewScene} /> }\n                { sortByShortcuts().map(scene => \n                    <Scene remove={edit} scene={scene} key={scene.endpointId} shortcut={isAShortcut(scene.endpointId)} computedLevel={area.scene} />\n                )}\n            </GridSection>\n\n        </React.Fragment>\n    )\n};"],"sourceRoot":""}