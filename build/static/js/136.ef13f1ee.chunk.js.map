{"version":3,"sources":["GridSection.js","ThermostatHistory.js"],"names":["useStyles","makeStyles","theme","base","margin","overflowX","alignContent","padding","borderRadius","gridColumn","overflowY","scrollColumn","height","nopad","background","backgroundColor","palette","page","GridSection","props","isMobile","useContext","LayoutContext","classes","useState","show","setShow","container","item","spacing","key","name","xs","className","classNames","scroll","primary","onClick","break","secondary","children","defaultProps","ThermostatHistory","history","setHistory","useEffect","qry","days","device","endpointId","fetch","method","headers","body","then","res","json","data","fd","lasttemp","temperature","map","d","x","Date","time","y","formatHistory","getHistory","Fragment","friendlyName","xType","width","yDomain","title","tickTotal","tickFormat","v","moment","format","curve"],"mappings":"yQAWMA,EAAYC,aAAW,SAAAC,GACzB,MAAO,CACHC,KAAM,CACFC,OAAQ,EACRC,UAAW,SACXC,aAAc,QACdC,QAAS,iBACTC,aAAc,mBAElBC,WAAY,CACRC,UAAW,UAEfC,aAAc,CACVD,UAAW,OACXE,OAAQ,QAEZC,MAAO,CACHN,QAAS,GAEbO,WAAY,CACRC,gBAAiBb,EAAMc,QAAQF,WAAWG,UAMvC,SAASC,EAAYC,GAAQ,IAEhCC,EAAaC,qBAAWC,iBAAxBF,SACFG,EAAUvB,IAHuB,EAIfwB,mBAASL,EAAMM,MAJA,mBAIhCA,EAJgC,KAI1BC,EAJ0B,KAMvC,OACI,kBAAC,IAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,QAAS,EAAGC,IAAKX,EAAMY,KAAMC,GAAIb,EAAMa,GACxDC,UAAYC,IAAWX,EAAQpB,KAAMgB,EAAMgB,OAASZ,EAAQZ,aAAeY,EAAQd,WAAYU,EAAML,WAAaS,EAAQT,WAAa,OAGtIK,EAAMY,MACH,kBAAC,IAAD,CAAMH,MAAI,EAACI,GAAI,GAAIC,UAAWV,EAAQV,OACtC,kBAAC,IAAD,CAAMoB,UAAWV,EAAQV,OACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcuB,QAASjB,EAAMY,KAAMM,QAAU,kBAAMX,GAASD,QACxDL,IAAaD,EAAMmB,QACnB,kBAAC,IAAD,KACKnB,EAAMoB,YAIhBnB,GAAYD,EAAMmB,OACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACKnB,EAAMoB,cAOzBd,GAAQN,EAAMqB,UAK5BtB,EAAYuB,aAAe,CACvBH,OAAO,EACPb,MAAM,EACNU,QAAQ,EACRH,GAAI,GACJlB,YAAY,I,wJCtED,SAAS4B,EAAkBvB,GAAQ,IAAD,EAEfK,mBAAS,IAFM,mBAEtCmB,EAFsC,KAE7BC,EAF6B,KAyC7C,OArCAC,qBAAU,YACN,WACI,IAAIC,EAAI,oEAAoE3B,EAAM4B,KAAK,mBAAmB5B,EAAM6B,OAAOC,WAAW,iCAElIC,MAAM,yBAA0B,CACxBC,OAAQ,OACRC,QAAS,CACL,OAAU,oCACV,eAAgB,oBAEpBC,KAAMP,IAETQ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GAAG,OAGjB,SAAuBE,GAEnB,IAAIC,EACAC,EAASF,EAAK,GAAGG,YAErBF,EAAKD,EAAKI,KAAI,SAACC,GAGX,OAAKH,EAASG,EAAEF,YAAa,GACzBD,EAASG,EAAEF,YACJ,CAACG,EAAG,IAAIC,KAAKF,EAAEG,MAAOC,EAAGJ,EAAEF,cAE3B,CAACG,EAAG,IAAIC,KAAKF,EAAEG,MAAOC,EAAGP,MAGxCf,EAAWc,GAlBIS,CAAcZ,MAqBjCa,KACD,CAACjD,EAAM4B,KAAK5B,EAAM6B,OAAOC,aAGxB,kBAAC,IAAMoB,SAAP,KACI,kBAAC,UAAD,CAAatC,KAAMZ,EAAM6B,OAAOsB,aAAa,iBAAiBnD,EAAM4B,KAAK,SACrE,kBAAC,IAAD,CAAQwB,MAAM,OAAOC,MAAO,IAAK5D,OAAQ,IAAK6D,QAAS,CAAC,GAAI,KACxD,kBAAC,IAAD,CAAOC,MAAM,SAASC,UAAW,EAAGC,WAAY,SAAAC,GAAC,OAAIC,IAAOD,GAAGE,OAAO,YACtE,kBAAC,IAAD,CAAOL,MAAM,WACb,kBAAC,IAAD,CAAYM,MAAO,aACfvB,KAAMd,IAEV,kBAAC,IAAD,CAAmBgC,UAAW","file":"static/js/136.ef13f1ee.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { LayoutContext } from './layout/NewLayoutProvider';\nimport classNames from 'classnames';\n\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nconst useStyles = makeStyles(theme => {\n    return {\n        base: {\n            margin: 1,\n            overflowX: \"hidden\",\n            alignContent: \"start\",\n            padding: \"3px !important\",\n            borderRadius: \"4px 4px 4px 4px\",\n        },\n        gridColumn: {\n            overflowY: \"hidden\",\n        },\n        scrollColumn: {\n            overflowY: \"auto\",\n            height: \"100%\",\n        },\n        nopad: {\n            padding: 0,\n        },\n        background: {\n            backgroundColor: theme.palette.background.page,\n        }\n    }\n});\n\n\nexport default function GridSection(props) {\n    \n    const { isMobile } = useContext(LayoutContext);\n    const classes = useStyles();\n    const [show, setShow] = useState(props.show);\n\n    return (\n        <Grid container item spacing={1} key={props.name} xs={props.xs} \n            className={ classNames(classes.base, props.scroll ? classes.scrollColumn : classes.gridColumn, props.background ? classes.background : null)} \n        >\n\n            {props.name &&\n                <Grid item xs={12} className={classes.nopad}>\n                <List className={classes.nopad} >\n                    <ListItem>\n                        <ListItemText primary={props.name} onClick={ () => setShow(!show) } />\n                        { (!isMobile || !props.break) &&\n                            <ListItemSecondaryAction>\n                                {props.secondary}\n                            </ListItemSecondaryAction>\n                        }\n                    </ListItem>\n                    { (isMobile && props.break) &&\n                        <ListItem>\n                            <ListItemSecondaryAction>\n                                {props.secondary}\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    }\n                </List>\n                </Grid>\n            }\n            { show && props.children}\n        </Grid>\n    );\n}\n\nGridSection.defaultProps = {\n    break: false,\n    show: true,\n    scroll: false,\n    xs: 12,\n    background: true,\n}\n \n\n","import React from 'react';\nimport { useState, useEffect } from 'react';\n\nimport moment from 'moment';\nimport 'moment-timezone';\nimport GridSection from './GridSection';\n\nimport {XYPlot, XAxis, YAxis, VerticalGridLines, LineSeries} from 'react-vis';\n\nexport default function ThermostatHistory(props) {\n\n    const [history, setHistory] = useState([])\n    \n    useEffect(() => {\n        function getHistory() {\n            var qry=\"select temperature from controller_property where time > now() - \"+props.days+\"d AND endpoint='\"+props.device.endpointId+\"' ORDER BY time DESC LIMIT 250\"\n            \n            fetch(\"/list/influx/querylist\", {\n                    method: 'post',\n                    headers: {\n                        'Accept': 'application/json, text/plain, */*',\n                        'Content-Type': 'application/json'\n                    },\n                    body: qry\n                })\n                .then(res=>res.json())\n                .then(res=>formatHistory(res))\n        }\n        \n        function formatHistory(data) {\n    \n            var fd=[]\n            var lasttemp=data[0].temperature\n    \n            fd = data.map((d)=> {\n                //return {x: new Date(d.time).toLocaleTimeString(), y: d.temperature}\n                \n                if ((lasttemp-d.temperature)<5) {\n                    lasttemp=d.temperature\n                    return {x: new Date(d.time), y: d.temperature}\n                } else {\n                    return {x: new Date(d.time), y: lasttemp}\n                }\n            });\n            setHistory(fd)\n        }\n\n        getHistory()\n    }, [props.days,props.device.endpointId]);   \n    \n    return (    \n        <React.Fragment>\n            <GridSection name={props.device.friendlyName+\" for the last \"+props.days+\" days\"}>\n                <XYPlot xType=\"time\" width={800} height={500} yDomain={[50, 85]} >\n                    <XAxis title=\"X Axis\" tickTotal={7} tickFormat={v => moment(v).format('MMM D')}/>\n                    <YAxis title=\"Y Axis\" />\n                    <LineSeries curve={'curveBasis'}\n                        data={history}\n                    />\n                    <VerticalGridLines tickTotal={7} />\n                </XYPlot>\n            </GridSection>\n        </React.Fragment>\n    )\n\n};\n"],"sourceRoot":""}