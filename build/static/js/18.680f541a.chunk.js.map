{"version":3,"sources":["controllers/properties/onLevel.js","SmallSlider.js"],"names":["OnLevel","props","useEffect","undefined","item","value","directive","device","endpointId","instance","interface","val","hasOwnProperty","parseInt","onLevel","valueOrDefault","unit","min","max","step","change","event","useStyles","makeStyles","half","alignItems","display","height","flexGrow","flexBasis","boxSizing","stack","justifyContent","flexWrap","width","marginRight","overflowX","paddingRight","padLeft","paddingLeft","slider","margin","small","padding","smallLabel","SmallSlider","classes","useState","setVal","className","onChange","newval","preChange","onChangeCommitted","disabled","variant","Array","isArray","Math","floor","defaultProps","default"],"mappings":"uHAAA,4EAGe,SAASA,EAAQC,GAyB5B,OAvBAC,qBAAU,gBACiBC,IAAnBF,EAAMG,KAAKC,OACXJ,EAAMK,UAAUL,EAAMM,OAAOC,WAAY,oBAAqB,aAAc,CAAE,QAAY,IAAM,GAAIP,EAAMG,KAAKK,YAGpH,CAACR,EAAMG,KAAMH,EAAMM,OAAQN,EAAMS,YAmBhC,kBAAC,UAAD,CACIL,MAbR,WACI,IAAIM,EAAI,GACR,IACQV,EAAMG,KAAKC,MAAMO,eAAe,aAChCD,EAAIE,SAASZ,EAAMG,KAAKC,MAAMS,UAGtC,UACA,OAAOH,EAKKI,GAAmBC,KAAM,IACjCC,IAAK,EAAGC,IAAK,IAAKC,KAAM,GACxBC,OApBR,SAA6BC,GACzBpB,EAAMK,UAAUL,EAAMM,OAAOC,WAAY,oBAAqB,aAAc,CAAE,QAAaa,GAAS,GAAIpB,EAAMG,KAAKK,e,oICRrHa,EAAYC,YAAW,CAEzBC,KAAM,CACFC,WAAY,SACZC,QAAS,OACTC,OAAQ,GACRC,SAAU,EACVC,UAAW,EACXC,UAAW,cAEfC,MAAO,CACHJ,OAAQ,OACRD,QAAS,OACTE,SAAU,EACVI,eAAgB,gBAChBC,SAAU,OACVC,MAAO,OACPJ,UAAW,aACXK,YAAa,EACbC,UAAW,SACXX,WAAY,SACZY,aAAc,GAElBC,QAAS,CACLC,YAAa,IAEjBC,OAAQ,CACJC,OAAQ,SAEZC,MAAO,CACHC,QAAS,GAEbC,WAAY,CACRL,YAAa,MAKN,SAASM,EAAY5C,GAEhC,IAAM6C,EAAUxB,IAFuB,EAGjByB,mBAAS9C,EAAMI,OAHE,mBAGhCM,EAHgC,KAG3BqC,EAH2B,KA6BvC,OAxBA9C,qBAAU,WACN8C,EAAO/C,EAAMI,SACd,CAACJ,EAAMI,QAuBN,oCACI,kBAAC,IAAD,CACI4C,UAAWH,EAAQJ,MACnBrC,WAAcF,IAANQ,EAAkB,EAAIA,EAAMQ,KAAMlB,EAAMkB,KAChDF,IAAKhB,EAAMgB,IAAKC,IAAKjB,EAAMiB,IAC3BgC,SAzBZ,SAAyB7B,EAAO8B,GAC5BH,EAAOG,GACHlD,EAAMmD,WACNnD,EAAMmD,UAAUD,IAuBZE,kBAnBZ,SAAsBhC,EAAM8B,GACxBlD,EAAMmB,OAAO+B,IAmBLG,cAAiBnD,IAANQ,GAAmBV,EAAMqD,WAEtCrD,EAAMe,KACJ,kBAAC,IAAD,CAAYuC,QAAQ,UAAUN,UAAWH,EAAQF,YAlBrDY,MAAMC,QAAQ9C,GACP+C,KAAKC,MAAMhD,EAAI,IAAI,MAAO+C,KAAKC,MAAMhD,EAAI,IAAIV,EAAMe,KAEnD0C,KAAKC,MAAMhD,GAAKV,EAAMe,MAgB3B,MAKd6B,EAAYe,aAAe,CACvB5C,KAAM,GACNC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN0C,QAAS,EACTxD,MAAO,EACPiD,UAAU","file":"static/js/18.680f541a.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport SmallSlider from '../../SmallSlider';\n\nexport default function OnLevel(props) {\n\n    useEffect(() => {\n        if (props.item.value===undefined) {\n            props.directive(props.device.endpointId, 'OnLevelController', 'SetOnLevel', { \"onLevel\" : 80 }, {}, props.item.instance)\n        }\n    // eslint-disable-next-line\n    }, [props.item, props.device, props.interface])\n\n    function handleOnLevelChange(event) {\n        props.directive(props.device.endpointId, 'OnLevelController', 'SetOnLevel', { \"onLevel\" :  event }, {}, props.item.instance)\n \n    }; \n    \n    function valueOrDefault() {\n        var val=50\n        try {\n            if (props.item.value.hasOwnProperty('onLevel')) {\n                val=parseInt(props.item.value.onLevel)\n            }\n        } \n        catch {}\n        return val\n    }\n\n    return (\n        <SmallSlider\n            value={ valueOrDefault() } unit={\"%\"}\n            min={0} max={100} step={10}\n            change={ handleOnLevelChange }\n        />\n    );\n}\n\n","import React , { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n         \n    half: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: 42,\n        flexGrow: 1,\n        flexBasis: 0,\n        boxSizing: \"border-box\",\n    },\n    stack: {\n        height: \"auto\",\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        marginRight: 8,\n        overflowX: \"hidden\",\n        alignItems: \"center\",\n        paddingRight: 8,\n    },\n    padLeft: {\n        paddingLeft: 16,\n    },\n    slider: {\n        margin: \"-18px\"\n    },\n    small: {\n        padding: 3,\n    },\n    smallLabel: {\n        paddingLeft: 16,\n    }\n\n});\n\nexport default function SmallSlider(props) {\n    \n    const classes = useStyles();\n    const [val, setVal] = useState(props.value)\n    \n    useEffect(() => {\n        setVal(props.value)\n    }, [props.value]);\n\n    \n    function handlePreChange(event, newval) {\n        setVal(newval);\n        if (props.preChange) {\n            props.preChange(newval);\n        }\n    }; \n\n    function handleChange(event,newval) {\n        props.change(newval);\n    }; \n   \n    function unitDisplay() {\n        if (Array.isArray(val)) {\n            return Math.floor(val[0])+' - '+ Math.floor(val[1])+props.unit\n        } else {\n            return Math.floor(val)+props.unit\n        }\n    }\n    \n    return (\n        <>\n            <Slider\n                className={classes.small}\n                value={ val===undefined ? 0 : val } step={props.step} \n                min={props.min} max={props.max}\n                onChange={handlePreChange}\n                onChangeCommitted={handleChange}\n                disabled={ val===undefined || props.disabled }\n            />\n            { props.unit ?\n                <Typography variant=\"caption\" className={classes.smallLabel} >{unitDisplay()}</Typography>\n            : null }\n        </>\n    );\n}\n\nSmallSlider.defaultProps = {\n    unit: '',\n    min: 0,\n    max: 100,\n    step: 1,\n    default: 0,\n    value: 0,\n    disabled: false,\n}\n\n\n"],"sourceRoot":""}