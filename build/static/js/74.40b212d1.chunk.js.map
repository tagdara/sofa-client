{"version":3,"sources":["SofaSlider.js","ToggleChip.js","ModeLines.js","SofaAvatarSlider.js","devices/receiver.js","ReceiverHero.js"],"names":["useStyles","makeStyles","half","alignItems","display","height","flexGrow","flexBasis","boxSizing","stack","justifyContent","flexWrap","width","marginRight","overflowX","overflowY","paddingRight","padLeft","paddingLeft","slider","margin","SofaSlider","props","classes","useState","value","setValue","useEffect","style","minWidth","className","name","variant","smallText","stackLabel","unit","Array","isArray","Math","floor","step","min","max","onChange","event","preChange","onChangeCommitted","change","disabled","defaultProps","default","tabs","theme","off","color","palette","primary","contrastText","backgroundColor","main","on","background","ToggleChip","label","chipState","onClick","ModeLines","getModes","modes","k","device","interfaces","length","controller","mc","modename","capabilityResources","friendlyNames","text","modechoices","j","configuration","supportedModes","modeResources","Object","keys","map","mode","key","modechoice","e","directive","handleModeChoice","SofaAvatarSlider","avatarClick","noback","noAvatarBack","avatarState","hasOwnProperty","undefined","Receiver","useContext","DataContext","SpeakerController","mute","setMute","showDetail","setShowDetail","wide","PowerController","powerState","friendlyName","secondary","InputController","input","surroundmodes","Surround","surroundName","checked","target","defaultValue","volume","Fragment","inputlist","inputs","push","getInputs","inp","inputname","ReceiverHero","devices","devicesByCategory","endpointId"],"mappings":"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","file":"static/js/74.40b212d1.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n         \n    half: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: 42,\n        flexGrow: 1,\n        flexBasis: 0,\n        boxSizing: \"border-box\",\n    },\n    stack: {\n        height: \"auto\",\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        marginRight: 8,\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n        alignItems: \"center\",\n        paddingRight: 8,\n    },\n    padLeft: {\n        paddingLeft: 16,\n    },\n    slider: {\n        margin: \"-18px\"\n    }\n\n});\n\nexport default function SofaSlider(props) {\n    \n    const classes = useStyles();\n    const [value, setValue] = useState(0)\n    \n    useEffect(() => {\n        if (props.value) {\n            setValue(props.value)\n        }\n    }, [props.value]);\n\n    \n    function handlePreChange(event, value) {\n        setValue(value);\n        if (props.preChange) {\n            props.preChange(value);\n        }\n    }; \n\n    function handleChange(event,value) {\n        props.change(value);\n    }; \n   \n    function unitDisplay() {\n        if (Array.isArray(value)) {\n            return Math.floor(value[0])+' - '+ Math.floor(value[1])+props.unit\n        } else {\n            return Math.floor(value)+props.unit\n        }\n    }\n   \n    return (\n        <div style={{ \"minWidth\": props.minWidth }} className={ props.padLeft ? classes.stack+\" \"+classes.padLeft: ( props.half ? classes.half : classes.stack) } >\n        { props.name ?\n            <Typography variant={ props.smallText ? \"caption\" : \"subtitle1\" } className={classes.stackLabel} >{props.name}</Typography>\n        :   null }\n        { props.unit ?\n            <Typography variant=\"caption\" className={classes.stackLabel} >{unitDisplay()}</Typography>\n        : null }\n            <Slider\n                value={value} step={props.step} \n                min={props.min} max={props.max}\n                onChange={handlePreChange}\n                onChangeCommitted={handleChange}\n                disabled={props.disabled}\n            />\n        </div>\n    );\n}\n\nSofaSlider.defaultProps = {\n    name: '',\n    unit: '',\n    min: 0,\n    max: 100,\n    step: 1,\n    default: 0,\n    value: 0,\n    tabs: '',\n    disabled: false,\n    padLeft: false,\n    half: false,\n    minWidth: 240,\n    smallText: false,\n}\n\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Chip from '@material-ui/core/Chip';\n\nconst useStyles = makeStyles(theme => {\n    return {        \n        off: {\n            margin: 4,\n            color: theme.palette.primary.contrastText, \n            '&:hover': {\n                    backgroundColor: theme.palette.primary.main,\n                    color: theme.palette.primary.contrastText,\n                }\n        },\n        on: {\n            margin: 4,\n            color: theme.palette.primary.contrastText,\n            background: theme.palette.primary.main,\n            '&:hover': {\n                    backgroundColor: theme.palette.primary.main,\n                    color: theme.palette.primary.contrastText,\n                },\n            '&:focus': {\n                backgroundColor: theme.palette.primary.main,\n                color: theme.palette.primary.contrastText,\n            }\n        }\n    }\n});\n\nexport default function ToggleChip(props) {\n\n    const classes = useStyles();\n\n    return (\n        <Chip \n            label={props.label}\n            className={ classes[props.chipState] }\n            onClick={ props.onClick}\n        />\n    )\n};\n\n\n\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport ToggleChip from './ToggleChip'\n\nexport default function ModeLines(props) {\n\n    function handleModeChoice(event, mode, modechoice) {\n        props.device[mode].directive('SetMode', { \"mode\": modechoice })\n    }; \n\n    function getModes() {\n        \n        var modes={}\n        for (var k = 0; k < props.device.interfaces.length; k++) {\n            if (props.device[props.device.interfaces[k]].controller==='ModeController') {\n                var mc=props.device[props.device.interfaces[k]]\n                var modename=mc.capabilityResources.friendlyNames[0].value.text\n                var modechoices=[]\n                for (var j = 0; j < mc.configuration.supportedModes.length; j++) {\n                    modechoices[mc.configuration.supportedModes[j].value] = mc.configuration.supportedModes[j].modeResources.friendlyNames[0].value.text\n                }\n                modes[modename]=modechoices\n            }\n        }\n        return modes\n    }\n   \n    return (\n        Object.keys(getModes()).map(mode => \n            <ListItem key={mode}>\n                <ListItemText primary={mode} key={mode} />\n                { Object.keys(getModes()[mode]).map(modechoice => \n                    <ToggleChip key = { modechoice } label = { getModes()[mode][modechoice] } chipState={ props.device[mode].mode.value===modechoice ? \"on\" : \"off\"} onClick={ (e) => handleModeChoice(e, mode, modechoice)} />\n                )}\n            </ListItem>\n        )\n    )\n}\n","import React from 'react';\nimport { useState, useEffect } from 'react';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport SofaSlider from './SofaSlider';\nimport ToggleAvatar from './ToggleAvatar'\n\nexport default function SofaAvatarSlider(props) {\n\n    const [value, setValue] = useState(0);\n\n    useEffect(() => {\n  \t    setValue(props.value)\n    }, [props.value]);\n\n    function handlePreChange(value) {\n        setValue(value)\n        if (props.hasOwnProperty('preChange')) {\n            props.preChange(value)\n        }\n    }; \n    \n    return (\n        <ListItem>\n            <ToggleAvatar onClick={props.avatarClick} noback={props.noAvatarBack} avatarState={ props.avatarState }>\n                {value}\n            </ToggleAvatar>\n            <SofaSlider {...props} preChange={handlePreChange} />\n        </ListItem>\n    );\n}\n\nSofaAvatarSlider.defaultProps = {\n    avatarClick:undefined,\n    noAvatarBack: false,\n    avatarState: \"on\",\n}\n\n","import React, { useState, useContext } from 'react';\nimport { DataContext } from '../DataContext/DataProvider';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nimport Switch from '@material-ui/core/Switch';\nimport SpeakerGroupIcon from '@material-ui/icons/SpeakerGroup';\nimport SofaAvatarSlider from '../SofaAvatarSlider'\n\nimport GridItem from '../GridItem'\nimport ToggleAvatar from '../ToggleAvatar'\nimport ToggleChip from '../ToggleChip'\nimport ModeLines from '../ModeLines'\n\nexport default function Receiver(props) {\n    \n    const { getModes } = useContext(DataContext);\n    const [mute, setMute] = useState(props.device.SpeakerController.mute.value);\n    const [showDetail, setShowDetail] = useState(false);\n\n    function handleVolumeChange(event) {\n        props.device.SpeakerController.directive('SetVolume', { \"volume\" : event} )\n    }; \n\n    function handleMuteChange(event) {\n        setMute(event)\n        props.device.SpeakerController.directive('SetVolume', { \"mute\" : !mute} )\n    }; \n    \n    function handlePowerChange(event) {\n        props.device.PowerController.directive(event.target.checked ? 'TurnOn' : 'TurnOff')\n    };\n    \n    function handleInput(event, inputname) {\n        props.device.InputController.directive('SelectInput', { \"input\": inputname } )\n    }; \n\n    function getInputs() {\n        var inputlist=[]\n        if (props.device.InputController.hasOwnProperty('inputs')) {\n            for (var k = 0; k < props.device.InputController.inputs.length; k++) {\n                inputlist.push(props.device.InputController.inputs[k].name)\n            }\n        }\n        return inputlist\n    }\n    \n    function surroundName() {\n        var surroundmodes=getModes(props.device).Surround\n        if (surroundmodes.hasOwnProperty(props.device.Surround.mode.value)) {\n            return surroundmodes[props.device.Surround.mode.value]\n        }\n        return \"\"\n    }\n\n    return (\n        <GridItem wide={props.wide}>\n            <ListItem>\n                <ToggleAvatar noback={true} onClick={ () => setShowDetail(!showDetail) } avatarState={ props.device.PowerController.powerState.value==='ON' ? \"on\" : \"off\" }>\n                    <SpeakerGroupIcon />\n                </ToggleAvatar>\n                <ListItemText onClick={ () => setShowDetail(!showDetail) } primary={props.device.friendlyName} secondary={ props.device.PowerController.powerState.value==='OFF' ? 'Off' : (props.device.InputController.input.value) ? props.device.InputController.input.value + \" / \"+ surroundName() : null}/>\n                <ListItemSecondaryAction>\n                    <Switch color=\"primary\" checked={props.device.PowerController.powerState.value==='ON'} onChange={ (e) => handlePowerChange(e) } />\n                </ListItemSecondaryAction>\n\n            </ListItem>\n        { (props.device.InputController.input.value==='Sonos' && !showDetail) || props.device.PowerController.powerState.value==='OFF'  ? null :\n            <SofaAvatarSlider   avatarClick={ () => handleMuteChange(!props.device.SpeakerController.mute.value)} noAvatarBack={true} \n                                avatarState={ props.device.PowerController.powerState.value==='ON' ? \"on\" : \"off\" }\n                                name=\"Volume\" min={0} max={100} defaultValue={0} step={1} value={props.device.SpeakerController.volume.value}\n                                disabled={ props.device.PowerController.powerState.value==='OFF' } minWidth={240} \n                                change={handleVolumeChange} />\n        }\n        { !showDetail || props.device.PowerController.powerState.value==='OFF' ? null :\n            <React.Fragment>\n                <ListItem>\n                    <ListItemText primary={\"Input\"} />\n                    { getInputs().map(inp => \n                        <ToggleChip key = {inp} label = { inp } chipState={ props.device.InputController.input.value===inp ? \"on\" : \"off\" } onClick={ (e) => handleInput(e, inp)} />\n                    )}\n                </ListItem>\n                <ModeLines device={props.device} />\n            </React.Fragment>\n        }\n        </GridItem>\n    );\n}\n\n","import React, { useContext } from 'react';\nimport { DataContext } from './DataContext/DataProvider';\nimport Receiver from './devices/receiver';\n\nexport default function ReceiverHero(props) {\n    \n    const { devicesByCategory } = useContext(DataContext);\n    const devices = devicesByCategory('RECEIVER')\n\n    return (\n        <React.Fragment>\n            { devices.map((device) => (\n                <Receiver wide={props.wide} key={device.endpointId} device={ device } />\n                ))\n            }\n        </React.Fragment> \n    );\n    \n}\n"],"sourceRoot":""}