{"version":3,"sources":["GridSection.js","other/Device.js","other/DeviceList.js","other/Shade.js","other/VirtualList.js","other/Mode.js","other/ModeList.js","MoreDevicesLayout.js"],"names":["useStyles","makeStyles","theme","base","margin","overflowX","alignContent","padding","borderRadius","gridColumn","overflowY","scrollColumn","maxHeight","mobile","height","desktop","background","backgroundColor","palette","layer","section","center","justifyContent","GridSection","props","isMobile","useContext","LayoutContext","classes","useState","show","setShow","container","item","spacing","key","name","xs","className","classNames","scroll","nopad","primary","onClick","break","secondary","children","defaultProps","minHeight","Device","noback","avatarState","device","PowerController","powerState","value","icon","friendlyName","hasOwnProperty","EnergySensor","power","color","checked","onChange","event","directive","endpointId","target","nested","DeviceList","Fragment","devices","map","button","borderColor","marginRight","buttonRight","Shade","handlePress","commandName","command","commands","controller","buttonGroup","size","variant","VirtualList","DataContext","virtualDeviceStates","Object","keys","index","Mode","setPowerState","ModeList","MoreDevicesLayout","deviceStatesByFriendlyName","deviceStatesByCategory","switches","modes","wide"],"mappings":"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","file":"static/js/80.80cbd048.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { LayoutContext } from './layout/NewLayoutProvider';\nimport classNames from 'classnames';\n\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst useStyles = makeStyles(theme => {\n    return {\n        base: {\n            margin: 1,\n            overflowX: \"hidden\",\n            alignContent: \"start\",\n            padding: \"3px !important\",\n            borderRadius: \"4px 4px 4px 4px\",\n        },\n        gridColumn: {\n            overflowY: \"hidden\",\n        },\n        scrollColumn: {\n            overflowY: \"auto\",\n            maxHeight: \"100%\",\n        },\n        mobile: {\n            height: 16,\n        },\n        desktop: {\n        },\n        background: {\n            backgroundColor: theme.palette.layer.section,\n        },\n        center: {\n            justifyContent: \"center\",\n        }\n    }\n});\n\n\nexport default function GridSection(props) {\n    \n    const { isMobile } = useContext(LayoutContext);\n    const classes = useStyles();\n    const [show, setShow] = useState(props.show);\n\n    return (\n        <Grid container item spacing={1} key={props.name} xs={props.xs} \n            className={ classNames(classes.base, props.scroll ? classes.scrollColumn : classes.gridColumn, props.background ? classes.background : null)} \n        >\n\n            {props.name &&\n                <Grid item xs={12} className={classes.nopad}>\n                <List className={classes.nopad} >\n                    <ListItem className={ isMobile ? classes.mobile : classes.desktop} >\n                        <ListItemText primary={props.name} onClick={ () => setShow(!show) } />\n                        { (!isMobile || !props.break) &&\n                            <>\n                                {props.secondary}\n                            </>\n                        }\n                    </ListItem >\n                    { (isMobile && props.break) &&\n                        <ListItem className={classes.center}>\n                                {props.secondary}\n                        </ListItem>\n                    }\n                </List>\n                </Grid>\n            }\n            { show && props.children}\n        </Grid>\n    );\n}\n\nGridSection.defaultProps = {\n    break: false,\n    show: true,\n    scroll: false,\n    xs: 12,\n    background: true,\n}\n \n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ToggleAvatar from '../ToggleAvatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Switch from '@material-ui/core/Switch';\nimport TuneIcon from '@material-ui/icons/Tune';\n\nimport GridItem from '../GridItem';\n\nconst useStyles = makeStyles(theme => {\n    return {      \n\n        item: {\n            minHeight: 54,\n        }\n    }\n})\n\nexport default function Device(props) {\n    \n    const classes = useStyles();\n \n    function handlePowerChange(event) {\n        props.directive(props.device.endpointId, \"PowerController\", event.target.checked ? 'TurnOn' : 'TurnOff')\n    }; \n\n    function nestLine(item) {\n        if (props.nested) { return item }\n        return <GridItem>{item}</GridItem>\n    }\n    \n    function energy() {\n        if (props.device.hasOwnProperty('EnergySensor')) {\n            return props.device.EnergySensor.power.value+\"W\"\n        }\n        return null\n    }\n\n    return ( nestLine(\n            <ListItem className={classes.item} >\n                <ToggleAvatar noback={true} avatarState={ props.device.PowerController.powerState.value==='ON' ? 'on' : 'off'}>{ props.icon ? props.icon : <TuneIcon />}</ToggleAvatar>\n                <ListItemText primary={props.device.friendlyName} secondary={ energy()} />\n                <ListItemSecondaryAction>\n                    <Switch color=\"primary\" checked={props.device.PowerController.powerState.value==='ON'} onChange={handlePowerChange} />\n                </ListItemSecondaryAction>\n           </ListItem> )\n    );\n}\n\n\n","import React from 'react';\n\nimport Device from './Device';\n\nexport default function DeviceList(props) {\n\n    return (\n        <React.Fragment>\n            { props.devices.map(device =>\n                <Device nested={props.nested} icon={props.icon} key={ device.endpointId } device={ device } directive={props.directive} />\n            )}\n        </React.Fragment>\n    )\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport TonalityIcon from '@material-ui/icons/Tonality';\nimport ToggleAvatar from '../ToggleAvatar'\nimport GridItem from '../GridItem';\n\nconst useStyles = makeStyles(theme => {\n    return {      \n        button: {\n            backgroundColor: theme.palette.background.button,\n            borderColor: \"rgba(255,255,255, 0) !important\",\n            marginRight: 1,\n            padding: \"3px 8px\"\n        },\n        buttonRight: {\n            padding: \"3px 8px\",\n            backgroundColor: theme.palette.background.button,\n        },\n        \n        item: {\n            minHeight: 54,\n        }\n    }\n})\n\nexport default function Shade(props) {\n\n    const classes = useStyles();\n\n    function handlePress(commandName) {\n        var command = props.commands[commandName]\n        props.directive(command.endpointId, command.controller, command.command, command.value)\n    }\n    \n    function nestLine(item) {\n        if (props.nested) { return item }\n        return <GridItem>{item}</GridItem>\n    }\n\n    return ( nestLine(\n        <ListItem className={classes.item} >\n            <ToggleAvatar noback={true} avatarState={ 'off' }>{ props.icon ? props.icon : <TonalityIcon />}</ToggleAvatar>\n            <ListItemText primary={props.name}/>\n            <ButtonGroup className={classes.buttonGroup} size=\"small\" variant=\"text\"  >\n                <Button className={classes.button} onClick={ () => handlePress('down') }><ExpandMoreIcon /></Button>\n                <Button className={classes.button} onClick={ () => handlePress('stop') }><RemoveIcon /></Button>\n                <Button className={classes.buttonRight} onClick={ () => handlePress('up') }><ExpandLessIcon /></Button>\n            </ButtonGroup>\n        </ListItem>\n        )\n    );\n}\n","import React, { useContext } from 'react';\nimport { DataContext } from '../DataContext/DataProvider';\n\nimport Shade from './Shade';\n\nexport default function VirtualList(props) {\n\n    const { virtualDeviceStates, directive } = useContext(DataContext);\n\n    return (\n        virtualDeviceStates ?\n            <React.Fragment>\n                { Object.keys(virtualDeviceStates).map((key, index) => (\n                    virtualDeviceStates[key]['type']==='shade' ?\n                        <Shade nested={props.nested} directive={directive} key={ index } name={ key } endpointId={ virtualDeviceStates[key].endpointId } commands={ virtualDeviceStates[key].commands } />\n                        :null\n                ))}\n            </React.Fragment>\n        : null \n    );\n}\n","import React, { useState } from 'react';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Switch from '@material-ui/core/Switch';\nimport TuneIcon from '@material-ui/icons/Tune';\n\nimport GridItem from '../GridItem';\nimport ToggleAvatar from '../ToggleAvatar';\n\n\nexport default function Mode(props) {\n\n    const [powerState, setPowerState] = useState(props.device.PowerController.powerState.value);\n    \n    function handlePowerChange(event) {\n        setPowerState(event.target.checked);\n        if (event.target.checked) {\n            props.device.PowerController.directive('TurnOn')\n        } else {\n            props.device.PowerController.directive('TurnOff')\n        }\n    }; \n    \n    return (\n        <GridItem >\n            <ListItem>\n                <ToggleAvatar avatarState={powerState==='ON' ? 'on' : 'off'}><TuneIcon /></ToggleAvatar>\n                <ListItemText primary={props.device.friendlyName}/>\n                <ListItemSecondaryAction>\n                    <Switch color=\"primary\" checked={props.device.PowerController.powerState.value==='ON'} onChange={handlePowerChange} />\n                </ListItemSecondaryAction>\n            </ListItem>\n        </GridItem>\n    );\n}\n\n","import React from \"react\";\nimport Mode from './Mode';\n\nexport default function ModeList(props) {\n\n    return (\n        <React.Fragment>\n            { props.devices.map((device) =>\n                <Mode key={ device.endpointId } device={ device }  />\n            )}\n        </React.Fragment>\n    )\n}\n","import React, { useContext } from 'react';\nimport { DataContext } from './DataContext/DataProvider';\nimport ErrorBoundary from './ErrorBoundary';\nimport VirtualList from './other/VirtualList';\n//import ComputerList from './other/ComputerList';\nimport ModeList from './other/ModeList';\nimport DeviceList from './other/DeviceList';\nimport GridSection from './GridSection';\nimport FanIcon from '@material-ui/icons/Toys';\n\nexport default function MoreDevicesLayout(props) {\n\n    const { deviceStatesByFriendlyName, deviceStatesByCategory, directive } = useContext(DataContext);\n    const switches=deviceStatesByFriendlyName(['Bathroom Fan','Bathroom Heat Fan'], false, 'SWITCH')\n    const modes = deviceStatesByCategory('MODE')\n \n    return (\n        <React.Fragment>\n            <GridSection name={'Shades'}>\n                <ErrorBoundary wide={props.wide}>\n                    <VirtualList directive={directive} />\n                </ErrorBoundary>\n            </GridSection>\n            { switches &&\n            <GridSection name={\"Other Devices\"} >\n                <ErrorBoundary wide={props.wide}>\n                    <DeviceList icon={<FanIcon />} devices={ switches } directive={directive} />\n                </ErrorBoundary>\n\n            </GridSection>\n            }\n            { modes && \n            <GridSection name={\"Modes\"} show={false}>\n                <ErrorBoundary wide={props.wide}>\n                    <ModeList devices={ modes } />\n                </ErrorBoundary>\n\n            </GridSection>\n            }\n        </React.Fragment>\n    )\n}\n\n"],"sourceRoot":""}