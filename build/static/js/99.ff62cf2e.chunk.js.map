{"version":3,"sources":["SofaSlider.js","SofaAvatarSlider.js","ModeLines.js","devices/TvRemote.js","devices/Television.js","TvHero.js"],"names":["useStyles","makeStyles","half","alignItems","display","height","flexGrow","flexBasis","boxSizing","stack","justifyContent","flexWrap","width","marginRight","overflowX","overflowY","paddingRight","padLeft","paddingLeft","slider","margin","SofaSlider","props","classes","useState","value","setValue","useEffect","style","minWidth","className","name","variant","smallText","stackLabel","unit","Array","isArray","Math","floor","step","min","max","onChange","event","preChange","onChangeCommitted","change","disabled","defaultProps","default","tabs","label","line","maxWidth","minHeight","padding","noPad","SofaAvatarSlider","reverse","small","onClick","avatarClick","noback","noAvatarBack","avatarState","avatarUnit","iconLabel","primary","hasOwnProperty","undefined","theme","titleBar","color","palette","contrastText","backgroundColor","main","select","ModeLines","useContext","DeviceContext","modes","getModes","deviceByEndpointId","device","endpointId","exclude","Object","keys","map","mode","key","displayEmpty","e","modechoice","directive","handleModeChoice","target","gridList","background","gridButtonTile","remoteButton","TvRemote","handleRemoteButton","buttonName","console","log","RemoteController","cellHeight","cols","list","bottomListItem","minLI","Television","showRemote","setShowRemote","showDetail","setShowDetail","inputs","getInputs","localVolumeCheck","Audio","subText","PowerController","powerState","SpeakerController","volume","InputController","input","wide","nopad","listItem","normal","friendlyName","secondary","checked","mute","inputname","inp","remoteListItem","React","memo","TvHero","deviceStatesByCategory","DataContext"],"mappings":"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","file":"static/js/99.ff62cf2e.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n         \n    half: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: 42,\n        flexGrow: 1,\n        flexBasis: 0,\n        boxSizing: \"border-box\",\n    },\n    stack: {\n        height: \"auto\",\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        marginRight: 0,\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n        alignItems: \"center\",\n        paddingRight: 8,\n    },\n    padLeft: {\n        paddingLeft: 16,\n    },\n    slider: {\n        margin: \"-18px\"\n    }\n\n});\n\nexport default function SofaSlider(props) {\n    \n    const classes = useStyles();\n    const [value, setValue] = useState(0)\n    \n    useEffect(() => {\n        if (props.value) {\n            setValue(props.value)\n        }\n    }, [props.value]);\n\n    \n    function handlePreChange(event, value) {\n        setValue(value);\n        if (props.preChange) {\n            props.preChange(value);\n        }\n    }; \n\n    function handleChange(event,value) {\n        props.change(value);\n    }; \n   \n    function unitDisplay() {\n        if (Array.isArray(value)) {\n            return Math.floor(value[0])+' - '+ Math.floor(value[1])+props.unit\n        } else {\n            return Math.floor(value)+props.unit\n        }\n    }\n   \n    return (\n        <div style={{ \"minWidth\": props.minWidth }} className={ props.padLeft ? classes.stack+\" \"+classes.padLeft: ( props.half ? classes.half : classes.stack) } >\n        { props.name ?\n            <Typography variant={ props.smallText ? \"caption\" : \"subtitle1\" } className={classes.stackLabel} >{props.name}</Typography>\n        :   null }\n        { props.unit ?\n            <Typography variant=\"caption\" className={classes.stackLabel} >{unitDisplay()}</Typography>\n        : null }\n            <Slider\n                value={value} step={props.step} \n                min={props.min} max={props.max}\n                onChange={handlePreChange}\n                onChangeCommitted={handleChange}\n                disabled={props.disabled}\n            />\n        </div>\n    );\n}\n\nSofaSlider.defaultProps = {\n    name: '',\n    unit: '',\n    min: 0,\n    max: 100,\n    step: 1,\n    default: 0,\n    value: 0,\n    tabs: '',\n    disabled: false,\n    padLeft: false,\n    half: false,\n    minWidth: 240,\n    smallText: false,\n}\n\n\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport SofaSlider from './SofaSlider';\nimport ToggleAvatar from './ToggleAvatar'\n\nconst useStyles = makeStyles({\n         \n    label: {\n        display: \"flex\",\n        flexGrow: 1,\n        flexBasis: 0,\n        minWidth: \"35%\",\n        alignItems: \"center\",\n    },\n    line: {\n        boxSizing: \"border-box\",\n        display: \"flex\",\n        width: '100%',\n        maxWidth: '100%',\n        flexGrow: 1,\n        flexBasis: 0,\n        minHeight: 48,\n        padding: \"0 16px\",\n        alignItems: \"center\",\n    },\n    noPad: {\n        boxSizing: \"border-box\",\n        display: \"flex\",\n        width: '100%',\n        maxWidth: '100%',\n        flexGrow: 1,\n        flexBasis: 0,\n        padding: 0,\n        alignItems: \"center\",\n    }\n})\n\nexport default function SofaAvatarSlider(props) {\n    \n    const classes = useStyles();\n    const [value, setValue] = useState(0);\n\n    useEffect(() => {\n  \t    setValue(props.value)\n    }, [props.value]);\n\n    function handlePreChange(value) {\n        setValue(value)\n        if (props.hasOwnProperty('preChange')) {\n            props.preChange(value)\n        }\n    }; \n    \n    return (\n        <div className={props.noPad ? classes.noPad : classes.line}>\n            { !props.reverse &&\n                <ToggleAvatar small={props.small} onClick={props.avatarClick} noback={props.noAvatarBack} avatarState={ props.avatarState }>\n                    {value+props.avatarUnit}\n                </ToggleAvatar>\n            }\n            { props.iconLabel &&\n                props.iconLabel\n            }\n            { props.label &&\n                <ListItemText primary={props.label} className={classes.label} />\n            }\n\n            <SofaSlider {...props} preChange={handlePreChange} />\n            { props.reverse &&\n                <ToggleAvatar reverse={props.reverse} small={props.small} onClick={props.avatarClick} noback={props.noAvatarBack} avatarState={ props.avatarState }>\n                    {value+props.avatarUnit}\n                </ToggleAvatar>\n            }\n        </div>\n    );\n}\n\nSofaAvatarSlider.defaultProps = {\n    avatarClick:undefined,\n    noAvatarBack: false,\n    avatarState: \"on\",\n    reverse: true,\n    small: false,\n    avatarUnit: \"\",\n    noPad: false,\n    \n}\n\n","import React, { useContext}  from 'react';\nimport { DeviceContext } from './DataContext/DeviceProvider';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\n\nconst useStyles = makeStyles(theme => {\n    \n    return {    \n        titleBar: {\n            width: \"100%\",\n            color: theme.palette.primary.contrastText,\n            backgroundColor: theme.palette.primary.main,\n        },\n        select: {\n            minWidth: \"50%\",\n        }\n    }\n\n});\n\nexport default function ModeLines(props) {\n\n    const classes = useStyles();\n    const { getModes, deviceByEndpointId } = useContext(DeviceContext);\n    const device=deviceByEndpointId(props.device.endpointId)\n    const modes=getModes(device, props.exclude)\n    \n    function handleModeChoice(event, mode, modechoice) {\n        props.directive(props.device.endpointId, mode, 'SetMode', { \"mode\": modechoice })\n    }; \n\n    return (\n        Object.keys(modes).map(mode => \n            <ListItem key={mode}>\n                <ListItemText primary={mode} key={mode} />\n                <Select disabled={props.disabled} className={classes.select} displayEmpty value={props.device[mode].mode.value ? props.device[mode].mode.value : \"\"} onChange={ (e) => handleModeChoice(e, mode, e.target.value)} >\n                    { Object.keys(modes[mode]).map(modechoice => \n                        <MenuItem key = { modes[mode][modechoice] } value={modechoice}>{modes[mode][modechoice]}</MenuItem>\n                    )}\n                </Select>\n            </ListItem>\n        )\n    )\n}\n\nModeLines.defaultProps = {\n  exclude: [],\n  disabled: false,\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport Button from '@material-ui/core/Button';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nconst useStyles = makeStyles(theme => {\n    \n    return {\n        gridList: { \n            maxWidth: 320,\n            margin: \"0 auto !important\",\n            backgroundColor: theme.palette.background.default,\n        },\n        gridButtonTile: {\n            width: \"100%\",\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        remoteButton: {\n            width: \"100%\",\n            flexGrow: 1,\n            height: \"100%\",\n        },\n    }\n});\n\n\nexport default function TvRemote(props) {\n    \n    const classes = useStyles();\n\n    function handleRemoteButton(buttonName) {\n        console.log('sending button',  buttonName)\n        props.device.RemoteController.directive('PressRemoteButton', { 'buttonName' : buttonName })\n    };\n\n    return (\n        <GridList cellHeight={80} className={classes.gridList} cols={3}>\n            <GridListTile cols={1}>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorUp')}>\n                    <ExpandLessIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorLeft')}>\n                    <ChevronLeftIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('DpadCenter')}>\n                    <FullscreenIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorRight')}>\n                    <ChevronRightIcon />\n                </Button>\n            </GridListTile>\n\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorDown')}>\n                    <ExpandMoreIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('Exit')}>\n                    <ArrowBackIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('Home')}>\n                    <HomeIcon />\n                </Button>\n            </GridListTile>\n        </GridList>\n    );\n\n}\n\n","import React,{ useState, useContext } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { DeviceContext } from '../DataContext/DeviceProvider';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport Switch from '@material-ui/core/Switch';\nimport TvIcon from '@material-ui/icons/Tv';\nimport ControlCameraIcon from '@material-ui/icons/ControlCamera';\n\nimport SofaAvatarSlider from '../SofaAvatarSlider'\nimport GridItem from '../GridItem'\nimport TvRemote from './TvRemote';\nimport ErrorBoundary from '../ErrorBoundary';\nimport ModeLines from '../ModeLines'\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles({\n    list: {\n        width: \"100%\",\n        padding: 0,\n    },\n    bottomListItem: {\n        flexWrap: \"wrap\",\n        justifyContent: \"flex-end\",\n    },\n    select: {\n        minWidth: \"50%\",\n    },\n    minLI: {\n        minHeight: 48,\n        display: \"flex\",\n        alignItems: \"center\",\n    },\n\n});\n\n\n\nexport function Television(props) {\n    \n    const classes = useStyles();\n    const [showRemote, setShowRemote] = useState(false)\n    const [showDetail, setShowDetail] = useState(false);\n    const { deviceByEndpointId, directive, getInputs} = useContext(DeviceContext);\n    const device=deviceByEndpointId(props.device.endpointId)\n    const inputs=getInputs(device)  \n\n    function handleVolumeChange(event) {\n        directive(props.device.endpointId,\"SpeakerController\", 'SetVolume', { \"volume\" : event} )\n    }; \n\n    function handleMuteChange(event) {\n        directive(props.device.endpointId,\"SpeakerController\", 'SetVolume', { \"mute\" : event} )\n    }; \n    \n    function handlePowerChange(event) {\n        directive(props.device.endpointId,\"PowerController\", event.target.checked ? 'TurnOn' : 'TurnOff')\n    };\n\n    function handleInput(event, inputname) {\n       directive(props.device.endpointId,\"InputController\", 'SelectInput', { \"input\": inputname } )\n    }; \n\n    function toggleRemote() {\n        setShowRemote(!showRemote)\n    }\n    \n    function localVolumeCheck() {\n        if ( props.device.hasOwnProperty('SpeakerController') ) {\n            if ( props.device.hasOwnProperty('Audio') ) {\n                if (props.device.Audio.mode.value===\"Audio.audioSystem\") {\n                    return true\n                } else {\n                    return false\n                }\n            } else {\n                return true\n            }\n        }\n        \n        return false\n\n    }\n    \n    function subText() {\n        if (showDetail || props.device.PowerController.powerState.value==='OFF') {\n            return null\n        }\n        if (props.device.PowerController.powerState.value!=='OFF') {\n            if (localVolumeCheck()) {\n                return props.device.SpeakerController.volume.value+\"% / \"+props.device.InputController.input.value\n            }\n        }\n        return props.device.InputController.input.value\n    }\n     \n    return (\n        <GridItem wide={props.wide} nopad={true} >\n            <ListItem className={classes.listItem}>\n                <ListItemIcon onClick={ () => setShowDetail(!showDetail) } ><TvIcon /></ListItemIcon>\n            <ErrorBoundary>\n                <ListItemText className={subText() ? classes.normal : classes.minLI}  onClick={ () => setShowDetail(!showDetail) } primary={props.device.friendlyName} secondary={subText()}/>\n            </ErrorBoundary>\n                <ListItemSecondaryAction>\n                    { props.device.PowerController.powerState.value!=='ON' ? null :\n                    <IconButton onClick={ () => toggleRemote() } >\n                        <ControlCameraIcon />\n                    </IconButton>\n                    }\n\n                    <Switch color=\"primary\" checked={props.device.PowerController.powerState.value==='ON'} onChange={ (e) => handlePowerChange(e) } />\n                </ListItemSecondaryAction>\n            </ListItem>\n        { localVolumeCheck() && ( props.device.PowerController.powerState.value==='ON' || showDetail ) &&\n            <SofaAvatarSlider   label={\"Volume\"} \n                                small={true} reverse={true} minWidth={64} \n                                value={props.device.SpeakerController.volume.value}\n                                change={handleVolumeChange} \n                                avatarClick={ () => handleMuteChange(!props.device.SpeakerController.mute.value)} \n                                avatarState={ props.device.PowerController.powerState.value==='ON' ? \"on\" : \"off\" }\n                                disabled={ props.device.PowerController.powerState.value==='OFF' }\n            />\n        }\n        { showDetail &&\n            <ListItem className={classes.bottomListItem}>\n                <ListItemText primary={\"Input\"} />\n                <Select disabled={props.device.PowerController.powerState.value!=='ON'} className={classes.select} displayEmpty value={props.device.InputController.input.value ? props.device.InputController.input.value : \"\"} onChange={ (e) => handleInput(e, e.target.value) } >\n                    { inputs.map(inp =>\n                        <MenuItem key={inp} value={inp}>{inp}</MenuItem>\n                    )}\n                </Select>\n            </ListItem>\n        }\n        { showDetail &&\n            <ModeLines disabled={props.device.PowerController.powerState.value!=='ON'} device={props.device} directive={directive} />\n        }\n        { showRemote &&\n            <ListItem className={classes.remoteListItem}>\n                <TvRemote device={props.device} />\n            </ListItem>\n        }\n        </GridItem>\n    )\n}\n\nexport default React.memo(Television);","import React, { useContext } from \"react\";\nimport Television from './devices/Television';\nimport { DataContext } from './DataContext/DataProvider';\n\nexport default function TvHero(props) {\n \n    const { deviceStatesByCategory } = useContext(DataContext);\n    const tvs= deviceStatesByCategory('TV')\n    \n    return (\n        tvs.map(device => \n            <Television wide={props.wide} key={device.endpointId} device={ device } />\n        )\n    );\n}\n"],"sourceRoot":""}