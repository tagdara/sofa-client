{"version":3,"sources":["GridSection.js","ThermostatHistory.js"],"names":["useStyles","makeStyles","theme","gridColumn","margin","overflowX","overflowY","alignContent","padding","backgroundColor","palette","background","page","borderRadius","nopad","GridSection","props","isMobile","useContext","LayoutContext","classes","container","item","spacing","key","name","xs","className","primary","break","secondary","children","defaultProps","ThermostatHistory","useState","history","setHistory","useEffect","qry","days","device","endpointId","fetch","method","headers","body","then","res","json","data","fd","lasttemp","temperature","map","d","x","Date","time","y","formatHistory","getHistory","Fragment","friendlyName","xType","width","height","yDomain","title","tickTotal","tickFormat","v","moment","format","curve"],"mappings":"oHAAA,6HAUMA,EAAYC,aAAW,SAAAC,GACzB,MAAO,CACHC,WAAY,CACRC,OAAQ,EACRC,UAAW,SACXC,UAAW,SACXC,aAAc,QACdC,QAAS,iBACTC,gBAAiBP,EAAMQ,QAAQC,WAAWC,KAC1CC,aAAc,mBAElBC,MAAO,CACHN,QAAS,OAMN,SAASO,EAAYC,GAAQ,IAEhCC,EAAaC,qBAAWC,iBAAxBF,SACFG,EAAUpB,IAEhB,OACI,kBAAC,IAAD,CAAMqB,WAAS,EAACC,MAAI,EAACC,QAAS,EAAGC,IAAKR,EAAMS,KAAMC,GAAI,GAAIC,UAAYP,EAAQjB,YACzEa,EAAMS,MACH,kBAAC,IAAD,CAAMH,MAAI,EAACI,GAAI,GAAIC,UAAWP,EAAQN,OACtC,kBAAC,IAAD,CAAMa,UAAWP,EAAQN,OACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcc,QAASZ,EAAMS,SACzBR,IAAaD,EAAMa,QACnB,kBAAC,IAAD,KACKb,EAAMc,YAIhBb,GAAYD,EAAMa,OACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACKb,EAAMc,cAO1Bd,EAAMe,UAKnBhB,EAAYiB,aAAe,CACvBH,OAAO,I,wJCrDI,SAASI,EAAkBjB,GAAQ,IAAD,EAEfkB,mBAAS,IAFM,mBAEtCC,EAFsC,KAE7BC,EAF6B,KAyC7C,OArCAC,qBAAU,YACN,WACI,IAAIC,EAAI,oEAAoEtB,EAAMuB,KAAK,mBAAmBvB,EAAMwB,OAAOC,WAAW,iCAElIC,MAAM,yBAA0B,CACxBC,OAAQ,OACRC,QAAS,CACL,OAAU,oCACV,eAAgB,oBAEpBC,KAAMP,IAETQ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GAAG,OAGjB,SAAuBE,GAEnB,IAAIC,EACAC,EAASF,EAAK,GAAGG,YAErBF,EAAKD,EAAKI,KAAI,SAACC,GAGX,OAAKH,EAASG,EAAEF,YAAa,GACzBD,EAASG,EAAEF,YACJ,CAACG,EAAG,IAAIC,KAAKF,EAAEG,MAAOC,EAAGJ,EAAEF,cAE3B,CAACG,EAAG,IAAIC,KAAKF,EAAEG,MAAOC,EAAGP,MAGxCf,EAAWc,GAlBIS,CAAcZ,MAqBjCa,KACD,CAAC5C,EAAMuB,KAAKvB,EAAMwB,OAAOC,aAGxB,kBAAC,IAAMoB,SAAP,KACI,kBAAC,UAAD,CAAapC,KAAMT,EAAMwB,OAAOsB,aAAa,iBAAiB9C,EAAMuB,KAAK,SACrE,kBAAC,IAAD,CAAQwB,MAAM,OAAOC,MAAO,IAAKC,OAAQ,IAAKC,QAAS,CAAC,GAAI,KACxD,kBAAC,IAAD,CAAOC,MAAM,SAASC,UAAW,EAAGC,WAAY,SAAAC,GAAC,OAAIC,IAAOD,GAAGE,OAAO,YACtE,kBAAC,IAAD,CAAOL,MAAM,WACb,kBAAC,IAAD,CAAYM,MAAO,aACfxB,KAAMd,IAEV,kBAAC,IAAD,CAAmBiC,UAAW","file":"static/js/130.20725a98.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { LayoutContext } from './layout/NewLayoutProvider';\n\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nconst useStyles = makeStyles(theme => {\n    return {\n        gridColumn: {\n            margin: 1,\n            overflowX: \"hidden\",\n            overflowY: \"hidden\",\n            alignContent: \"start\",\n            padding: \"3px !important\",\n            backgroundColor: theme.palette.background.page,\n            borderRadius: \"4px 4px 4px 4px\",\n        },\n        nopad: {\n            padding: 0,\n        }\n    }\n});\n\n\nexport default function GridSection(props) {\n    \n    const { isMobile } = useContext(LayoutContext);\n    const classes = useStyles();\n\n    return (\n        <Grid container item spacing={1} key={props.name} xs={12} className={ classes.gridColumn}>\n            {props.name &&\n                <Grid item xs={12} className={classes.nopad}>\n                <List className={classes.nopad}>\n                    <ListItem>\n                        <ListItemText primary={props.name} />\n                        { (!isMobile || !props.break) &&\n                            <ListItemSecondaryAction>\n                                {props.secondary}\n                            </ListItemSecondaryAction>\n                        }\n                    </ListItem>\n                    { (isMobile && props.break) &&\n                        <ListItem>\n                            <ListItemSecondaryAction>\n                                {props.secondary}\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    }\n                </List>\n                </Grid>\n            }\n            {props.children}\n        </Grid>\n    );\n}\n\nGridSection.defaultProps = {\n    break: false\n}\n \n\n","import React from 'react';\nimport { useState, useEffect } from 'react';\n\nimport moment from 'moment';\nimport 'moment-timezone';\nimport GridSection from './GridSection';\n\nimport {XYPlot, XAxis, YAxis, VerticalGridLines, LineSeries} from 'react-vis';\n\nexport default function ThermostatHistory(props) {\n\n    const [history, setHistory] = useState([])\n    \n    useEffect(() => {\n        function getHistory() {\n            var qry=\"select temperature from controller_property where time > now() - \"+props.days+\"d AND endpoint='\"+props.device.endpointId+\"' ORDER BY time DESC LIMIT 250\"\n            \n            fetch(\"/list/influx/querylist\", {\n                    method: 'post',\n                    headers: {\n                        'Accept': 'application/json, text/plain, */*',\n                        'Content-Type': 'application/json'\n                    },\n                    body: qry\n                })\n                .then(res=>res.json())\n                .then(res=>formatHistory(res))\n        }\n        \n        function formatHistory(data) {\n    \n            var fd=[]\n            var lasttemp=data[0].temperature\n    \n            fd = data.map((d)=> {\n                //return {x: new Date(d.time).toLocaleTimeString(), y: d.temperature}\n                \n                if ((lasttemp-d.temperature)<5) {\n                    lasttemp=d.temperature\n                    return {x: new Date(d.time), y: d.temperature}\n                } else {\n                    return {x: new Date(d.time), y: lasttemp}\n                }\n            });\n            setHistory(fd)\n        }\n\n        getHistory()\n    }, [props.days,props.device.endpointId]);   \n    \n    return (    \n        <React.Fragment>\n            <GridSection name={props.device.friendlyName+\" for the last \"+props.days+\" days\"}>\n                <XYPlot xType=\"time\" width={800} height={500} yDomain={[50, 85]} >\n                    <XAxis title=\"X Axis\" tickTotal={7} tickFormat={v => moment(v).format('MMM D')}/>\n                    <YAxis title=\"Y Axis\" />\n                    <LineSeries curve={'curveBasis'}\n                        data={history}\n                    />\n                    <VerticalGridLines tickTotal={7} />\n                </XYPlot>\n            </GridSection>\n        </React.Fragment>\n    )\n\n};\n"],"sourceRoot":""}