{"version":3,"sources":["controllers/ColorTemperatureController.js","SmallSlider.js"],"names":["ColorTemperatureController","props","interface","colorTemperatureInKelvin","value","min","max","step","change","directive","disabled","device","PowerController","powerState","useStyles","makeStyles","half","alignItems","display","height","flexGrow","flexBasis","boxSizing","stack","justifyContent","flexWrap","width","marginRight","overflowX","paddingRight","padLeft","paddingLeft","slider","margin","small","padding","smallLabel","SmallSlider","classes","useState","val","setVal","useEffect","className","undefined","onChange","event","newval","preChange","onChangeCommitted","unit","variant","Array","isArray","Math","floor","defaultProps","default"],"mappings":"wHAAA,8FAMe,SAASA,EAA2BC,GAM/C,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,oBAGA,kBAAC,IAAD,KACKA,EAAMC,UAAUC,yBAAyBC,OAE9C,kBAAC,IAAD,KACI,kBAAC,UAAD,CACAA,MAAOH,EAAMC,UAAUC,yBAAyBC,MAChDC,IAAK,IAAMC,IAAK,IAAMC,KAAM,IAC5BC,OAhBZ,SAAsCJ,GAClCH,EAAMC,UAAUO,UAAU,sBAAuB,CAAE,yBAA4BL,KAgBvEM,SAA2D,QAAhDT,EAAMU,OAAOC,gBAAgBC,WAAWT,Y,oICpB7DU,EAAYC,YAAW,CAEzBC,KAAM,CACFC,WAAY,SACZC,QAAS,OACTC,OAAQ,GACRC,SAAU,EACVC,UAAW,EACXC,UAAW,cAEfC,MAAO,CACHJ,OAAQ,OACRD,QAAS,OACTE,SAAU,EACVI,eAAgB,gBAChBC,SAAU,OACVC,MAAO,OACPJ,UAAW,aACXK,YAAa,EACbC,UAAW,SACXX,WAAY,SACZY,aAAc,GAElBC,QAAS,CACLC,YAAa,IAEjBC,OAAQ,CACJC,OAAQ,SAEZC,MAAO,CACHC,QAAS,GAEbC,WAAY,CACRL,YAAa,MAKN,SAASM,EAAYpC,GAEhC,IAAMqC,EAAUxB,IAFuB,EAGjByB,mBAAStC,EAAMG,OAHE,mBAGhCoC,EAHgC,KAG3BC,EAH2B,KA6BvC,OAxBAC,qBAAU,WACND,EAAOxC,EAAMG,SACd,CAACH,EAAMG,QAuBN,oCACI,kBAAC,IAAD,CACIuC,UAAWL,EAAQJ,MACnB9B,WAAcwC,IAANJ,EAAkB,EAAIA,EAAMjC,KAAMN,EAAMM,KAChDF,IAAKJ,EAAMI,IAAKC,IAAKL,EAAMK,IAC3BuC,SAzBZ,SAAyBC,EAAOC,GAC5BN,EAAOM,GACH9C,EAAM+C,WACN/C,EAAM+C,UAAUD,IAuBZE,kBAnBZ,SAAsBH,EAAMC,GACxB9C,EAAMO,OAAOuC,IAmBLrC,cAAiBkC,IAANJ,GAAmBvC,EAAMS,WAEtCT,EAAMiD,KACJ,kBAAC,IAAD,CAAYC,QAAQ,UAAUR,UAAWL,EAAQF,YAlBrDgB,MAAMC,QAAQb,GACPc,KAAKC,MAAMf,EAAI,IAAI,MAAOc,KAAKC,MAAMf,EAAI,IAAIvC,EAAMiD,KAEnDI,KAAKC,MAAMf,GAAKvC,EAAMiD,MAgB3B,MAKdb,EAAYmB,aAAe,CACvBN,KAAM,GACN7C,IAAK,EACLC,IAAK,IACLC,KAAM,EACNkD,QAAS,EACTrD,MAAO,EACPM,UAAU","file":"static/js/169.88824160.chunk.js","sourcesContent":["import React from 'react';\n\nimport SmallSlider from '../SmallSlider';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nexport default function ColorTemperatureController(props) {\n\n    function handleColorTemperatureChange(value) {\n        props.interface.directive('SetColorTemperature', { \"colorTemperatureInKelvin\": value} )\n    }; \n\n    return (\n        <TableRow>\n            <TableCell>\n                Temperature\n            </TableCell>\n            <TableCell>\n                {props.interface.colorTemperatureInKelvin.value}\n            </TableCell>\n            <TableCell>\n                <SmallSlider\n                value={props.interface.colorTemperatureInKelvin.value}\n                min={2000} max={7000} step={100}\n                change={handleColorTemperatureChange}\n                disabled={!props.device.PowerController.powerState.value==='ON'}\n                />\n            </TableCell>\n        </TableRow>\n    );\n\n}\n\n\n","import React , { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n         \n    half: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: 42,\n        flexGrow: 1,\n        flexBasis: 0,\n        boxSizing: \"border-box\",\n    },\n    stack: {\n        height: \"auto\",\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        marginRight: 8,\n        overflowX: \"hidden\",\n        alignItems: \"center\",\n        paddingRight: 8,\n    },\n    padLeft: {\n        paddingLeft: 16,\n    },\n    slider: {\n        margin: \"-18px\"\n    },\n    small: {\n        padding: 3,\n    },\n    smallLabel: {\n        paddingLeft: 16,\n    }\n\n});\n\nexport default function SmallSlider(props) {\n    \n    const classes = useStyles();\n    const [val, setVal] = useState(props.value)\n    \n    useEffect(() => {\n        setVal(props.value)\n    }, [props.value]);\n\n    \n    function handlePreChange(event, newval) {\n        setVal(newval);\n        if (props.preChange) {\n            props.preChange(newval);\n        }\n    }; \n\n    function handleChange(event,newval) {\n        props.change(newval);\n    }; \n   \n    function unitDisplay() {\n        if (Array.isArray(val)) {\n            return Math.floor(val[0])+' - '+ Math.floor(val[1])+props.unit\n        } else {\n            return Math.floor(val)+props.unit\n        }\n    }\n    \n    return (\n        <>\n            <Slider\n                className={classes.small}\n                value={ val===undefined ? 0 : val } step={props.step} \n                min={props.min} max={props.max}\n                onChange={handlePreChange}\n                onChangeCommitted={handleChange}\n                disabled={ val===undefined || props.disabled }\n            />\n            { props.unit ?\n                <Typography variant=\"caption\" className={classes.smallLabel} >{unitDisplay()}</Typography>\n            : null }\n        </>\n    );\n}\n\nSmallSlider.defaultProps = {\n    unit: '',\n    min: 0,\n    max: 100,\n    step: 1,\n    default: 0,\n    value: 0,\n    disabled: false,\n}\n\n\n"],"sourceRoot":""}