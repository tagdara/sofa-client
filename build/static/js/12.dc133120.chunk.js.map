{"version":3,"sources":["controllers/properties/targetTemperature.js","SmallSlider.js"],"names":["TargetSetPoint","props","useEffect","undefined","interface","targetSetPoint","deepvalue","hasOwnProperty","setDefault","value","unit","min","max","step","change","event","directive","disabled","device","ThermostatController","useStyles","makeStyles","half","alignItems","display","height","flexGrow","flexBasis","boxSizing","stack","justifyContent","flexWrap","width","marginRight","overflowX","paddingRight","padLeft","paddingLeft","slider","margin","small","padding","smallLabel","SmallSlider","classes","useState","val","setVal","className","onChange","newval","preChange","onChangeCommitted","variant","Array","isArray","Math","floor","defaultProps","default"],"mappings":"uHAAA,4EAGe,SAASA,EAAeC,GAenC,OAbAC,qBAAU,gBAE2CC,IAA7CF,EAAMG,UAAUC,eAAeC,aAC3BL,EAAMG,UAAUG,eAAe,eAC/BN,EAAMG,UAAUI,WAAW,MAGpC,CAACP,EAAMG,YAON,kBAAC,UAAD,CACIK,MAAQR,EAAMG,UAAUC,eAAeC,YAAcI,KAAM,IAC3DC,IAAK,GAAIC,IAAK,GAAIC,KAAM,EACxBC,OARR,SAAoCC,GAChCd,EAAMG,UAAUY,UAAU,oBAAqB,CAAE,eAAmBD,KAQhEE,UAAWhB,EAAMiB,OAAOC,qBAAqBd,eAAeC,gB,oIClBlEc,EAAYC,YAAW,CAEzBC,KAAM,CACFC,WAAY,SACZC,QAAS,OACTC,OAAQ,GACRC,SAAU,EACVC,UAAW,EACXC,UAAW,cAEfC,MAAO,CACHJ,OAAQ,OACRD,QAAS,OACTE,SAAU,EACVI,eAAgB,gBAChBC,SAAU,OACVC,MAAO,OACPJ,UAAW,aACXK,YAAa,EACbC,UAAW,SACXX,WAAY,SACZY,aAAc,GAElBC,QAAS,CACLC,YAAa,IAEjBC,OAAQ,CACJC,OAAQ,SAEZC,MAAO,CACHC,QAAS,GAEbC,WAAY,CACRL,YAAa,KAKN,SAASM,EAAY1C,GAEhC,IAAM2C,EAAUxB,IAFuB,EAGjByB,mBAAS5C,EAAMQ,OAHE,mBAGhCqC,EAHgC,KAG3BC,EAH2B,KA6BvC,OAxBA7C,qBAAU,WACN6C,EAAO9C,EAAMQ,SACd,CAACR,EAAMQ,QAuBN,oCACI,kBAAC,IAAD,CACIuC,UAAWJ,EAAQJ,MACnB/B,WAAcN,IAAN2C,EAAkB,EAAIA,EAAMjC,KAAMZ,EAAMY,KAChDF,IAAKV,EAAMU,IAAKC,IAAKX,EAAMW,IAC3BqC,SAzBZ,SAAyBlC,EAAOmC,GAC5BH,EAAOG,GACHjD,EAAMkD,WACNlD,EAAMkD,UAAUD,IAuBZE,kBAnBZ,SAAsBrC,EAAMmC,GACxBjD,EAAMa,OAAOoC,IAmBLjC,cAAiBd,IAAN2C,GAAmB7C,EAAMgB,WAEtChB,EAAMS,KACJ,kBAAC,IAAD,CAAY2C,QAAQ,UAAUL,UAAWJ,EAAQF,YAlBrDY,MAAMC,QAAQT,GACPU,KAAKC,MAAMX,EAAI,IAAI,MAAOU,KAAKC,MAAMX,EAAI,IAAI7C,EAAMS,KAEnD8C,KAAKC,MAAMX,GAAK7C,EAAMS,MAgB3B,MAKdiC,EAAYe,aAAe,CACvBhD,KAAM,GACNC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN8C,QAAS,EACTlD,MAAO,EACPQ,UAAU","file":"static/js/12.dc133120.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport SmallSlider from '../../SmallSlider';\n\nexport default function TargetSetPoint(props) {\n    \n    useEffect(() => {\n        // Set default if passed undefined\n        if (props.interface.targetSetPoint.deepvalue()===undefined) {\n            if (props.interface.hasOwnProperty('setDefault')) {\n                props.interface.setDefault(70)\n            }\n        }\n    }, [props.interface])\n    \n    function handleTargetSetPointChange(event) {\n        props.interface.directive('SetTargetSetPoint', { \"targetSetPoint\" : event })\n    }; \n\n    return (\n        <SmallSlider\n            value={ props.interface.targetSetPoint.deepvalue() } unit={\"%\"}\n            min={60} max={90} step={1}\n            change={ handleTargetSetPointChange }\n            disabled={!props.device.ThermostatController.targetSetPoint.deepvalue()}\n        />\n    );\n}\n\n","import React , { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n         \n    half: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: 42,\n        flexGrow: 1,\n        flexBasis: 0,\n        boxSizing: \"border-box\",\n    },\n    stack: {\n        height: \"auto\",\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        marginRight: 8,\n        overflowX: \"hidden\",\n        alignItems: \"center\",\n        paddingRight: 8,\n    },\n    padLeft: {\n        paddingLeft: 16,\n    },\n    slider: {\n        margin: \"-18px\"\n    },\n    small: {\n        padding: 3,\n    },\n    smallLabel: {\n        paddingLeft: 8,\n    }\n\n});\n\nexport default function SmallSlider(props) {\n    \n    const classes = useStyles();\n    const [val, setVal] = useState(props.value)\n    \n    useEffect(() => {\n        setVal(props.value)\n    }, [props.value]);\n\n    \n    function handlePreChange(event, newval) {\n        setVal(newval);\n        if (props.preChange) {\n            props.preChange(newval);\n        }\n    }; \n\n    function handleChange(event,newval) {\n        props.change(newval);\n    }; \n   \n    function unitDisplay() {\n        if (Array.isArray(val)) {\n            return Math.floor(val[0])+' - '+ Math.floor(val[1])+props.unit\n        } else {\n            return Math.floor(val)+props.unit\n        }\n    }\n    \n    return (\n        <>\n            <Slider\n                className={classes.small}\n                value={ val===undefined ? 0 : val } step={props.step} \n                min={props.min} max={props.max}\n                onChange={handlePreChange}\n                onChangeCommitted={handleChange}\n                disabled={ val===undefined || props.disabled }\n            />\n            { props.unit ?\n                <Typography variant=\"caption\" className={classes.smallLabel} >{unitDisplay()}</Typography>\n            : null }\n        </>\n    );\n}\n\nSmallSlider.defaultProps = {\n    unit: '',\n    min: 0,\n    max: 100,\n    step: 1,\n    default: 0,\n    value: 0,\n    disabled: false,\n}\n\n\n"],"sourceRoot":""}