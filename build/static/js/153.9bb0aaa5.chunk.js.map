{"version":3,"sources":["automation/AutomationInput.js","automation/automationTrigger.js"],"names":["AutomationInput","withStyles","theme","input","minWidth","borderRadius","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","borderColor","boxShadow","InputBase","useStyles","makeStyles","flex","display","wideSelect","width","AutomationTrigger","props","classes","interfaceobj","undefined","device","dev","hasOwnProperty","j","capabilities","length","interface","split","item","controller","instance","console","log","getInterface","useState","loadPropMod","propertyName","propMod","setPropMod","name","React","lazy","catch","default","modulename","value","directives","otherdev","dirs","concat","Object","keys","placeholder","directive","endpointId","controllerName","command","payload","index","save","nolist","elevation","wide","xs","selectDevice","newdevice","newitem","directiveName","actionValues","av","propertyFromDirective","friendlyName","remove","reorder","moveUp","moveDown","delete","className","onChange","e","newval","target","controllerForProperty","id","controllerProperties","map","devProp","key","Module","fallback","renderSuspenseModule","size","onClick"],"mappings":"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","file":"static/js/153.9bb0aaa5.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/styles';\nimport InputBase from '@material-ui/core/InputBase';\n\nconst AutomationInput = withStyles(theme => ({\n    input: {\n        minWidth: '100px',\n        borderRadius: 4,\n        position: 'relative',\n        backgroundColor: theme.palette.background.paper,\n        border: '1px solid #ced4da',\n        fontSize: 16,\n        padding: '10px 26px 10px 12px',\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\n        '&:focus': {\n            borderRadius: 4,\n            borderColor: '#80bdff',\n            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n        },\n    },\n}))(InputBase);\n\nexport default AutomationInput\n","import React, { Suspense } from 'react';\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport TextField from '@material-ui/core/TextField';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport AutomationDevice from './AutomationDevice';\nimport AutomationInput from './AutomationInput';\nimport GridItem from '../GridItem';\nimport Grid from '@material-ui/core/Grid';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles({\n\n    flex: {\n        display: \"flex\",\n    },\n    wideSelect: {\n        width: \"100%\",\n    }\n});\n\n\nexport default function AutomationTrigger(props) {\n\n    const classes = useStyles();\n    const interfaceobj=getInterface()\n    const [propMod, setPropMod] = useState(loadPropMod(props.item.propertyName))\n\n    function getInterface() {\n        \n        if (props.device===undefined) { return undefined }\n        var dev=props.device\n        if (dev.hasOwnProperty('capabilities')) {\n            for (var j = 0; j < dev.capabilities.length; j++) {\n                if (dev.capabilities[j].interface.split('.')[1]===props.item.controller) {\n                    if (props.item.instance===undefined && dev.capabilities[j].interface.instance===undefined) {\n                        return dev.capabilities[j]\n                    }\n                    if (props.item.hasOwnProperty('instance') && dev.capabilities[j].hasOwnProperty('instance')) {\n                        if (props.item.instance===dev.capabilities[j].instance.split('.')[1]) {\n                            return dev.capabilities[j]\n                        }\n                    }               \n                }\n            }\n        }\n        console.log('failed get interface',props.item.controller, props.item.instance ,props.device)\n        return undefined\n    }\n\n    function errorBlock(modulename) {\n        return <TextField value={'failed'+modulename} />\n    }\n\n    function loadPropMod(name) {\n        if (name===undefined) { return undefined}\n        let pmod=React.lazy(() => { \n                try { \n                    return import('../controllers/properties/'+name).catch(() => ({ default: () => errorBlock(name) }))\n                }\n                catch {\n                    return <TextField value={'failed '+name} />\n                }\n            })\n        return pmod\n    }\n\n\n    function propertyFromDirective(controllerName, directiveName) {\n        if (controllerName===undefined || directiveName===undefined) {\n            return undefined\n        }\n        if (props.directives.hasOwnProperty(controllerName) && props.directives[controllerName].hasOwnProperty(directiveName)) {\n            var actionValues = props.directives[controllerName][directiveName]\n            for (var av in actionValues) {\n                return av\n            }\n        }\n        return undefined\n    }\n\n    function directives(otherdev) {\n\n        if (props.device===undefined && otherdev===undefined) { return [] }\n        var dev=props.device\n        if (otherdev) { dev=otherdev }\n        var dirs=[]\n        console.log('XXXXY dev',dev)\n        if (!dev.hasOwnProperty('capabilities')) { return [] }\n        for (var j = 0; j < dev.capabilities.length; j++) {\n            if (props.directives.hasOwnProperty(dev.capabilities[j].interface.split('.')[1])) {\n                dirs=dirs.concat(Object.keys(props.directives[dev.capabilities[j].interface.split('.')[1]]));\n            }\n        }\n        return dirs\n    }\n    \n    function placeholder(modulename) {\n        return <TextField value={modulename} />\n    }\n    \n    function renderSuspenseModule( modulename ) {\n        if (propMod!==undefined) {\n            if (propMod===null) {\n                return null\n            }\n            let Module=propMod\n            return  <Suspense key={ modulename } fallback={ placeholder() }>\n                         <Module item={props.item} interface={ interfaceobj } device={props.device} instance={props.item.instance} directive={directive} />\n                    </Suspense>\n        } else {\n            return null\n        }\n    }\n\n    function handleChangePropertyName(newval) {\n        setPropMod(loadPropMod(newval))\n        props.save(props.index, {...props.item, \"value\": undefined, \"controller\":props.controllerForProperty(props.device.endpointId, newval), \"propertyName\": newval })\n    }\n\n\n    function selectDevice(newdevice) {\n        console.log('selected new device',newdevice)\n        var newitem={}\n        setPropMod(loadPropMod(propertyFromDirective(newdevice.capabilities[0].interface, directives(newdevice.capabilities[0].interface)[0])))\n        newitem={...props.item, instance: newdevice.capabilities[0].instance, name:newdevice.friendlyName, endpointId: newdevice.endpointId, controller:newdevice.capabilities[0], command:directives(newdevice.capabilities[0].interface)[0], value: undefined}\n        props.save(props.index, newitem)\n    }\n\n    function directive (endpointId, controllerName, command, payload={}, cookie={}, instance) {\n        if (command==='TurnOn') { payload=\"ON\"}\n        if (command==='TurnOff') { payload=\"OFF\"}\n        console.log('placeholder', props.index, {...props.item, controller:controllerName, command:command, instance: instance, value: payload})\n        props.save(props.index, {...props.item, controller:controllerName, command:command, instance: instance, value: payload})\n    }\n\n\n    return (\n        <GridItem nolist={true} elevation={0} wide={true} xs={12}>\n            <AutomationDevice   device={props.device} index={props.index} selectDevice={selectDevice} wide={props.wide}\n                                remove={props.remove} reorder={props.reorder}\n                                moveUp={props.moveUp} moveDown={props.moveDown} delete={props.delete} />\n\n            { props.device!==undefined &&\n                <Grid item xs={props.wide ? 12 : 4 } className={classes.flex} >\n                    <ListItem>\n                        <Select className={classes.wideSelect} value={props.item.propertyName ? props.item.propertyName : ''} \n                                onChange={(e) => handleChangePropertyName(e.target.value)} \n                                input={<AutomationInput name=\"property\" id=\"property-select\" />} >\n                        { props.controllerProperties.map(devProp => \n                            <MenuItem key={props.device.endpointId+devProp} value={devProp}>{devProp}</MenuItem>\n                        )}\n                        </Select>\n                    </ListItem>\n                </Grid>\n            }\n            { props.device!==undefined &&\n                <Grid item xs={props.wide ? 12 : 4} className={classes.flex} >\n                    <ListItem >\n                        { renderSuspenseModule(props.item.propertyName) }\n                    </ListItem>\n                </Grid>\n            }\n            { !props.wide && \n                <>\n                    { props.remove &&\n                        <ListItemSecondaryAction>\n                            <IconButton size=\"small\" onClick={() => props.delete(props.index)}><CloseIcon /></IconButton>     \n                        </ListItemSecondaryAction>\n                    }\n                    { props.reorder &&\n                        <ListItemSecondaryAction>\n                            { props.index > 0 &&\n                                <IconButton size=\"small\" onClick={() => props.moveUp(props.index)}><ExpandLessIcon /></IconButton>\n                            }\n                            <IconButton size=\"small\" onClick={() => props.moveDown(props.index)}><ExpandMoreIcon /></IconButton>\n                        </ListItemSecondaryAction>\n                    }\n                </>\n            }\n        </GridItem>\n    )\n}\n"],"sourceRoot":""}