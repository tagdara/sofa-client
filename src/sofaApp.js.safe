import React, { Component, createElement  } from 'react';
import { PropTypes } from 'prop-types';
import { withStyles } from '@material-ui/core/styles';
import { withTheme } from '@material-ui/core/styles';
import Loadable from 'react-loadable';
import { withLayout } from './DataContext/withLayout';

import Divider from '@material-ui/core/Divider';
import Grid from '@material-ui/core/Grid';
import IconButton from '@material-ui/core/IconButton';
import Toolbar from '@material-ui/core/Toolbar';
import Typography from '@material-ui/core/Typography';

import MenuIcon from '@material-ui/icons/Menu';
import HistoryIcon from '@material-ui/icons/History';
import EditIcon from '@material-ui/icons/Edit';
import TuneIcon from '@material-ui/icons/Tune';
import DevicesOtherIcon from '@material-ui/icons/DevicesOther';

import Sidebar from './sidebar';
import BottomNav from './bottomnav';
import SofaAppBar from "./sofaAppBar";
import SofaAppContent from "./SofaAppContent";

import ButtonGrid from './devices/buttonGrid';
import AutomationDialog from "./automation/automationDialog"
import ButtonDialog from './buttonDialog';
import ScheduleDialog from './schedule/scheduleDialog';
import EventDialog from './event/eventDialog';

import PlaceholderCard from './PlaceholderCard';

const styles = {
    
    controlArea: {
        margin: "0 auto",
        maxWidth: 1440,
        width: "100%",
        paddingTop: "env(safe-area-inset-top)",
        boxSizing: "border-box",
        overflowY: "auto",
        height: "100%",
    },
    gridColumn: {
        overflowX: "hidden",
    }
};

class SofaApp extends Component {

    constructor(props) {
        super(props);

        this.state = {
            width: window.innerWidth,
            page: 'Audio Video',
            drawerOpen: false,
            automationOpen: false,
            scheduleOpen: false,
        };
        this.handleDrawerOpen = this.handleDrawerOpen.bind(this);
        this.pageChange = this.pageChange.bind(this);
    } 
    
      
    pageChange = page => {
        this.setState({page:page.value})
    }

    handleDialogOpen = (dialog) => {
        if (dialog=='Automation') {
            this.setState({ automationOpen: true})
        } else if (dialog=='Schedule') {
            this.setState({ scheduleOpen: true})
        }
    }

    handleDialogClose = () => {
        this.setState({ automationOpen: false, scheduleOpen: false})
    }

    
    handleDrawerOpen = () => {
        this.setState({ drawerOpen: !this.state.drawerOpen });
    };

    handleDrawerClose = () => {
        this.setState({ drawerOpen: false });
    };

    handleWindowSizeChange = () => {
        this.setState({ width: window.innerWidth });
    };

    componentDidMount() {
        window.addEventListener('resize', this.handleWindowSizeChange);
    }
    
    render() {

        const { classes } = this.props;
        const { width, categories, active, automationOpen, scheduleOpen, page } = this.state;
        const isMobile = width <= 800;

        return (
            <React.Fragment>
                <SofaAppBar open={this.handleDrawerOpen} mobile={isMobile}/>
                <Sidebar open={this.state.drawerOpen} close={this.handleDrawerClose} handleDialog={this.handleDialogOpen} />
                { isMobile ? null : <Toolbar /> }
                { this.props.layout ?
                    <SofaAppContent isMobile={isMobile} page={page} layout={this.props.layout} />
                : null }
                { automationOpen ?
                    <AutomationDialog open={automationOpen} close={this.handleDialogClose} />
                : null }
                { scheduleOpen ?
                    <ScheduleDialog open={scheduleOpen} close={this.handleDialogClose} />
                : null }

                { isMobile ?
                <React.Fragment>
                    <Toolbar />
                    <BottomNav pageChange={this.pageChange} toggleSidebar={this.handleDrawerOpen} closeSidebar={this.handleDrawerClose}/>
                </React.Fragment>
                : null }
            </React.Fragment>
        );
    }
}

SofaApp.propTypes = {
    classes: PropTypes.object.isRequired,
};

export default withTheme()(withLayout(withStyles(styles)(SofaApp)));
