{"version":3,"sources":["SofaSlider.js","ToggleChip.js","ModeLines.js","devices/TvRemote.js","devices/Television.js","TvHero.js"],"names":["useStyles","makeStyles","half","alignItems","display","height","flexGrow","flexBasis","boxSizing","stack","justifyContent","flexWrap","width","marginRight","overflowX","overflowY","paddingRight","padLeft","paddingLeft","slider","margin","SofaSlider","props","classes","useState","value","setValue","useEffect","style","minWidth","className","name","variant","smallText","stackLabel","unit","Array","isArray","Math","floor","step","min","max","onChange","event","preChange","onChangeCommitted","change","disabled","defaultProps","default","tabs","theme","off","color","palette","primary","contrastText","backgroundColor","main","on","background","ToggleChip","label","chipState","onClick","ModeLines","getModes","modes","k","device","interfaces","length","controller","mc","modename","capabilityResources","friendlyNames","text","modechoices","j","configuration","supportedModes","modeResources","Object","keys","map","mode","key","modechoice","e","directive","handleModeChoice","gridList","maxWidth","gridButtonTile","remoteButton","TvRemote","handleRemoteButton","buttonName","console","log","RemoteController","cellHeight","cols","list","bottomListItem","Television","mute","setMute","showRemote","setShowRemote","showDetail","setShowDetail","volume","setVolume","PowerController","powerState","setPowerState","hasOwnProperty","SpeakerController","wide","listItem","noback","avatarState","friendlyName","secondary","InputController","input","checked","target","instance","localVolumeCheck","listItemBottom","defaultValue","inputlist","inputs","push","getInputs","inp","inputname","remoteListItem","TvHero","devicesByCategory","useContext","DataContext","Fragment","endpointId"],"mappings":"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","file":"static/js/75.d031b9d0.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n         \n    half: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: 42,\n        flexGrow: 1,\n        flexBasis: 0,\n        boxSizing: \"border-box\",\n    },\n    stack: {\n        height: \"auto\",\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        marginRight: 8,\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n        alignItems: \"center\",\n        paddingRight: 8,\n    },\n    padLeft: {\n        paddingLeft: 16,\n    },\n    slider: {\n        margin: \"-18px\"\n    }\n\n});\n\nexport default function SofaSlider(props) {\n    \n    const classes = useStyles();\n    const [value, setValue] = useState(0)\n    \n    useEffect(() => {\n        if (props.value) {\n            setValue(props.value)\n        }\n    }, [props.value]);\n\n    \n    function handlePreChange(event, value) {\n        setValue(value);\n        if (props.preChange) {\n            props.preChange(value);\n        }\n    }; \n\n    function handleChange(event,value) {\n        props.change(value);\n    }; \n   \n    function unitDisplay() {\n        if (Array.isArray(value)) {\n            return Math.floor(value[0])+' - '+ Math.floor(value[1])+props.unit\n        } else {\n            return Math.floor(value)+props.unit\n        }\n    }\n   \n    return (\n        <div style={{ \"minWidth\": props.minWidth }} className={ props.padLeft ? classes.stack+\" \"+classes.padLeft: ( props.half ? classes.half : classes.stack) } >\n        { props.name ?\n            <Typography variant={ props.smallText ? \"caption\" : \"subtitle1\" } className={classes.stackLabel} >{props.name}</Typography>\n        :   null }\n        { props.unit ?\n            <Typography variant=\"caption\" className={classes.stackLabel} >{unitDisplay()}</Typography>\n        : null }\n            <Slider\n                value={value} step={props.step} \n                min={props.min} max={props.max}\n                onChange={handlePreChange}\n                onChangeCommitted={handleChange}\n                disabled={props.disabled}\n            />\n        </div>\n    );\n}\n\nSofaSlider.defaultProps = {\n    name: '',\n    unit: '',\n    min: 0,\n    max: 100,\n    step: 1,\n    default: 0,\n    value: 0,\n    tabs: '',\n    disabled: false,\n    padLeft: false,\n    half: false,\n    minWidth: 240,\n    smallText: false,\n}\n\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Chip from '@material-ui/core/Chip';\n\nconst useStyles = makeStyles(theme => {\n    return {        \n        off: {\n            margin: 4,\n            color: theme.palette.primary.contrastText, \n            '&:hover': {\n                    backgroundColor: theme.palette.primary.main,\n                    color: theme.palette.primary.contrastText,\n                }\n        },\n        on: {\n            margin: 4,\n            color: theme.palette.primary.contrastText,\n            background: theme.palette.primary.main,\n            '&:hover': {\n                    backgroundColor: theme.palette.primary.main,\n                    color: theme.palette.primary.contrastText,\n                },\n            '&:focus': {\n                backgroundColor: theme.palette.primary.main,\n                color: theme.palette.primary.contrastText,\n            }\n        }\n    }\n});\n\nexport default function ToggleChip(props) {\n\n    const classes = useStyles();\n\n    return (\n        <Chip \n            label={props.label}\n            className={ classes[props.chipState] }\n            onClick={ props.onClick}\n        />\n    )\n};\n\n\n\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport ToggleChip from './ToggleChip'\n\nexport default function ModeLines(props) {\n\n    function handleModeChoice(event, mode, modechoice) {\n        props.device[mode].directive('SetMode', { \"mode\": modechoice })\n    }; \n\n    function getModes() {\n        \n        var modes={}\n        for (var k = 0; k < props.device.interfaces.length; k++) {\n            if (props.device[props.device.interfaces[k]].controller==='ModeController') {\n                var mc=props.device[props.device.interfaces[k]]\n                var modename=mc.capabilityResources.friendlyNames[0].value.text\n                var modechoices=[]\n                for (var j = 0; j < mc.configuration.supportedModes.length; j++) {\n                    modechoices[mc.configuration.supportedModes[j].value] = mc.configuration.supportedModes[j].modeResources.friendlyNames[0].value.text\n                }\n                modes[modename]=modechoices\n            }\n        }\n        return modes\n    }\n   \n    return (\n        Object.keys(getModes()).map(mode => \n            <ListItem key={mode}>\n                <ListItemText primary={mode} key={mode} />\n                { Object.keys(getModes()[mode]).map(modechoice => \n                    <ToggleChip key = { modechoice } label = { getModes()[mode][modechoice] } chipState={ props.device[mode].mode.value===modechoice ? \"on\" : \"off\"} onClick={ (e) => handleModeChoice(e, mode, modechoice)} />\n                )}\n            </ListItem>\n        )\n    )\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport Button from '@material-ui/core/Button';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nconst useStyles = makeStyles(theme => {\n    \n    return {\n        gridList: { \n            maxWidth: 320,\n            margin: \"0 auto !important\",\n            backgroundColor: theme.palette.background.default,\n        },\n        gridButtonTile: {\n            width: \"100%\",\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        remoteButton: {\n            width: \"100%\",\n            flexGrow: 1,\n            height: \"100%\",\n        },\n    }\n});\n\n\nexport default function TvRemote(props) {\n    \n    const classes = useStyles();\n\n    function handleRemoteButton(buttonName) {\n        console.log('sending button',  buttonName)\n        props.device.RemoteController.directive('PressRemoteButton', { 'buttonName' : buttonName })\n    };\n\n    return (\n        <GridList cellHeight={80} className={classes.gridList} cols={3}>\n            <GridListTile cols={1}>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorUp')}>\n                    <ExpandLessIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorLeft')}>\n                    <ChevronLeftIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('DpadCenter')}>\n                    <FullscreenIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorRight')}>\n                    <ChevronRightIcon />\n                </Button>\n            </GridListTile>\n\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorDown')}>\n                    <ExpandMoreIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('Exit')}>\n                    <ArrowBackIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('Home')}>\n                    <HomeIcon />\n                </Button>\n            </GridListTile>\n        </GridList>\n    );\n\n}\n\n","import React,{ useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport Switch from '@material-ui/core/Switch';\nimport TvIcon from '@material-ui/icons/Tv';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport ControlCameraIcon from '@material-ui/icons/ControlCamera';\n\nimport SofaSlider from '../SofaSlider'\nimport GridItem from '../GridItem'\nimport ToggleAvatar from '../ToggleAvatar'\nimport ToggleChip from '../ToggleChip'\nimport TvRemote from './TvRemote';\nimport ErrorBoundary from '../ErrorBoundary';\nimport ModeLines from '../ModeLines'\n\nconst useStyles = makeStyles({\n    list: {\n        width: \"100%\",\n    },\n    bottomListItem: {\n        flexWrap: \"wrap\",\n        justifyContent: \"flex-end\",\n    },\n\n});\n\nexport default function Television(props) {\n    \n    const classes = useStyles();\n    const [mute, setMute] = useState(false);\n    const [showRemote, setShowRemote] = useState(false)\n    const [showDetail, setShowDetail] = useState(false);\n    const [volume, setVolume] = useState(0);\n    const [powerState, setPowerState] = useState(props.device.PowerController.powerState.value);\n    \n    useEffect(() => {\n        if (props.device.hasOwnProperty('SpeakerController')) {\n            setVolume(props.device.SpeakerController.volume.value);\n            setMute(props.device.SpeakerController.mute.value);\n        }\n    }, [props.device])\n\n  \n    function getInputs() {\n        var inputlist=[]\n        if (props.device.InputController.hasOwnProperty('inputs')) {\n            for (var k = 0; k < props.device.InputController.inputs.length; k++) {\n                inputlist.push(props.device.InputController.inputs[k].name)\n            }\n        }\n        return inputlist\n    }\n\n    function handlePreVolumeChange(event) {\n        setVolume(event);\n    }; \n\n    function handleVolumeChange(event) {\n        setVolume(event);\n        props.device.SpeakerController.directive('SetVolume', { \"volume\" : event} )\n    }; \n\n    function handleMuteChange(event) {\n        props.device.SpeakerController.directive('SetVolume', { \"mute\" : event} )\n    }; \n    \n    function handlePowerChange(event) {\n        setPowerState(event.target.checked);\n        props.device.PowerController.directive(event.target.checked ? 'TurnOn' : 'TurnOff')\n    };\n\n    function handleInput(event, inputname) {\n        props.device.InputController.directive('SelectInput', { \"input\": inputname } )\n    }; \n\n    function toggleRemote() {\n        setShowRemote(!showRemote)\n    }\n    \n    function localVolumeCheck() {\n        if ( props.device.hasOwnProperty('SpeakerController') ) {\n            for (var k = 0; k < props.device.interfaces.length; k++) {\n                if (props.device[props.device.interfaces[k]].controller==='ModeController') {\n                    if (props.device[props.device.interfaces[k]].instance===\"Tv.Audio\") {\n                        if (props.device[props.device.interfaces[k]].mode.value===\"Audio.audioSystem\") {\n                            return true\n                        }\n                    }\n                    return false\n                }\n            }\n            return true\n        } else {\n            return false\n        }\n    }\n    \n    return (\n        <GridItem wide={props.wide}>\n            <ListItem className={classes.listItem}>\n            <ErrorBoundary>\n                <ToggleAvatar noback={true} onClick={ () => setShowDetail(!showDetail) } avatarState={ props.device.PowerController.powerState.value==='ON' ? \"on\" : \"off\" }>\n                    <TvIcon />\n                </ToggleAvatar>\n            </ErrorBoundary>\n            <ErrorBoundary>\n                <ListItemText onClick={ () => setShowDetail(!showDetail) } primary={props.device.friendlyName} secondary={props.device.InputController.input.value}/>\n            </ErrorBoundary>\n                <ListItemSecondaryAction>\n                    { props.device.PowerController.powerState.value!=='ON' ? null :\n                    <IconButton onClick={ () => toggleRemote() } >\n                        <ControlCameraIcon />\n                    </IconButton>\n                    }\n\n                    <Switch color=\"primary\" checked={props.device.PowerController.powerState.value==='ON'} onChange={ (e) => handlePowerChange(e) } />\n                </ListItemSecondaryAction>\n            </ListItem>\n        { localVolumeCheck() && powerState==='ON' && showDetail ?\n            <ListItem className={classes.listItemBottom}>\n                <ToggleAvatar noback={true} onClick={ () => handleMuteChange(!props.device.SpeakerController.mute.value)} avatarState={ props.device.PowerController.powerState.value==='ON' ? \"on\" : \"off\" }>\n                    {mute ? <VolumeOffIcon /> : <VolumeUpIcon /> }\n                </ToggleAvatar>\n                <SofaSlider name=\"Volume\" unit=\"%\" min={0} max={100} defaultValue={0} step={1} value={volume}\n                            minWidth={240} preChange={handlePreVolumeChange} change={handleVolumeChange} padLeft={false} />\n            </ListItem>\n            : null\n        }\n        { showDetail &&\n            <ListItem className={classes.bottomListItem}>\n                \n                <ListItemText primary={\"Input\"} />\n                { getInputs().map(inp => \n                    <ToggleChip key = {inp} label = { inp } chipState={ props.device.InputController.input.value===inp ? \"on\" : \"off\" } onClick={ (e) => handleInput(e, inp)} />\n                )}\n            </ListItem>\n        }\n        { showDetail &&\n            <ModeLines device={props.device} />\n        }\n        { showRemote &&\n            <ListItem className={classes.remoteListItem}>\n                <TvRemote device={props.device} />\n            </ListItem>\n        }\n        </GridItem>\n    )\n}","import React, { useContext } from \"react\";\nimport Television from './devices/Television';\nimport { DataContext } from './DataContext/DataProvider';\n\nexport default function TvHero(props) {\n    \n    const { devicesByCategory } = useContext(DataContext);\n\n    return (\n        <React.Fragment>\n            { devicesByCategory('TV').map(device => \n                <Television wide={props.wide} key={device.endpointId} device={ device } />\n            )}\n        </React.Fragment>\n    );\n}\n"],"sourceRoot":""}