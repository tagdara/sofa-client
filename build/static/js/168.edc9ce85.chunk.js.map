{"version":3,"sources":["controllers/BrightnessController.js","SmallSlider.js"],"names":["useStyles","makeStyles","indent","paddingLeft","paddingRight","nobreak","whiteSpace","alignItems","BrightnessController","props","classes","interface","brightness","value","className","min","max","step","change","event","directive","disabled","device","PowerController","powerState","half","display","height","flexGrow","flexBasis","boxSizing","stack","justifyContent","flexWrap","width","marginRight","overflowX","padLeft","slider","margin","small","padding","smallLabel","SmallSlider","useState","val","setVal","useEffect","undefined","onChange","newval","preChange","onChangeCommitted","unit","variant","Array","isArray","Math","floor","defaultProps","default"],"mappings":"wHAAA,sGAOMA,EAAYC,YAAW,CAEzBC,OAAQ,CACJC,YAAa,GACbC,aAAc,GAElBC,QAAS,CACLC,WAAY,SACZC,WAAY,YAIL,SAASC,EAAqBC,GAEzC,IAAMC,EAAUV,IAMhB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,mBAGA,kBAAC,IAAD,KAAYS,EAAME,UAAUC,WAAWC,MAAM,KAC7C,kBAAC,IAAD,CAAWC,UAAWJ,EAAQL,SAC1B,kBAAC,UAAD,CACIQ,MAAOJ,EAAME,UAAUC,WAAWC,MAClCE,IAAK,EAAGC,IAAK,IAAKC,KAAM,GACxBC,OAdhB,SAAgCC,GAC5BV,EAAME,UAAUS,UAAU,gBAAiB,CAAE,WAAeD,KAchDE,UAAWZ,EAAMa,OAAOC,gBAAgBC,WAAWX,Y,oICjCjEb,EAAYC,YAAW,CAEzBwB,KAAM,CACFlB,WAAY,SACZmB,QAAS,OACTC,OAAQ,GACRC,SAAU,EACVC,UAAW,EACXC,UAAW,cAEfC,MAAO,CACHJ,OAAQ,OACRD,QAAS,OACTE,SAAU,EACVI,eAAgB,gBAChBC,SAAU,OACVC,MAAO,OACPJ,UAAW,aACXK,YAAa,EACbC,UAAW,SACX7B,WAAY,SACZH,aAAc,GAElBiC,QAAS,CACLlC,YAAa,IAEjBmC,OAAQ,CACJC,OAAQ,SAEZC,MAAO,CACHC,QAAS,GAEbC,WAAY,CACRvC,YAAa,MAKN,SAASwC,EAAYlC,GAEhC,IAAMC,EAAUV,IAFuB,EAGjB4C,mBAASnC,EAAMI,OAHE,mBAGhCgC,EAHgC,KAG3BC,EAH2B,KA6BvC,OAxBAC,qBAAU,WACND,EAAOrC,EAAMI,SACd,CAACJ,EAAMI,QAuBN,oCACI,kBAAC,IAAD,CACIC,UAAWJ,EAAQ8B,MACnB3B,WAAcmC,IAANH,EAAkB,EAAIA,EAAM5B,KAAMR,EAAMQ,KAChDF,IAAKN,EAAMM,IAAKC,IAAKP,EAAMO,IAC3BiC,SAzBZ,SAAyB9B,EAAO+B,GAC5BJ,EAAOI,GACHzC,EAAM0C,WACN1C,EAAM0C,UAAUD,IAuBZE,kBAnBZ,SAAsBjC,EAAM+B,GACxBzC,EAAMS,OAAOgC,IAmBL7B,cAAiB2B,IAANH,GAAmBpC,EAAMY,WAEtCZ,EAAM4C,KACJ,kBAAC,IAAD,CAAYC,QAAQ,UAAUxC,UAAWJ,EAAQgC,YAlBrDa,MAAMC,QAAQX,GACPY,KAAKC,MAAMb,EAAI,IAAI,MAAOY,KAAKC,MAAMb,EAAI,IAAIpC,EAAM4C,KAEnDI,KAAKC,MAAMb,GAAKpC,EAAM4C,MAgB3B,MAKdV,EAAYgB,aAAe,CACvBN,KAAM,GACNtC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN2C,QAAS,EACT/C,MAAO,EACPQ,UAAU","file":"static/js/168.edc9ce85.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport SmallSlider from '../SmallSlider';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst useStyles = makeStyles({\n        \n    indent: {\n        paddingLeft: 40,\n        paddingRight: 8,\n    },\n    nobreak: {\n        whiteSpace: \"nowrap\",\n        alignItems: \"center\",\n    }\n});\n\nexport default function BrightnessController(props) {\n    \n    const classes = useStyles();\n\n    function handleBrightnessChange(event) {\n        props.interface.directive('SetBrightness', { \"brightness\" : event })\n    }; \n\n    return (\n        <TableRow>\n            <TableCell>\n                Brightness\n            </TableCell>\n            <TableCell>{props.interface.brightness.value+\"%\"}</TableCell>\n            <TableCell className={classes.nobreak} >\n                <SmallSlider\n                    value={props.interface.brightness.value}\n                    min={0} max={100} step={10}\n                    change={handleBrightnessChange}\n                    disabled={!props.device.PowerController.powerState.value}\n                />\n            </TableCell>\n        </TableRow>\n    );\n}\n\n","import React , { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n         \n    half: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: 42,\n        flexGrow: 1,\n        flexBasis: 0,\n        boxSizing: \"border-box\",\n    },\n    stack: {\n        height: \"auto\",\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        marginRight: 8,\n        overflowX: \"hidden\",\n        alignItems: \"center\",\n        paddingRight: 8,\n    },\n    padLeft: {\n        paddingLeft: 16,\n    },\n    slider: {\n        margin: \"-18px\"\n    },\n    small: {\n        padding: 3,\n    },\n    smallLabel: {\n        paddingLeft: 16,\n    }\n\n});\n\nexport default function SmallSlider(props) {\n    \n    const classes = useStyles();\n    const [val, setVal] = useState(props.value)\n    \n    useEffect(() => {\n        setVal(props.value)\n    }, [props.value]);\n\n    \n    function handlePreChange(event, newval) {\n        setVal(newval);\n        if (props.preChange) {\n            props.preChange(newval);\n        }\n    }; \n\n    function handleChange(event,newval) {\n        props.change(newval);\n    }; \n   \n    function unitDisplay() {\n        if (Array.isArray(val)) {\n            return Math.floor(val[0])+' - '+ Math.floor(val[1])+props.unit\n        } else {\n            return Math.floor(val)+props.unit\n        }\n    }\n    \n    return (\n        <>\n            <Slider\n                className={classes.small}\n                value={ val===undefined ? 0 : val } step={props.step} \n                min={props.min} max={props.max}\n                onChange={handlePreChange}\n                onChangeCommitted={handleChange}\n                disabled={ val===undefined || props.disabled }\n            />\n            { props.unit ?\n                <Typography variant=\"caption\" className={classes.smallLabel} >{unitDisplay()}</Typography>\n            : null }\n        </>\n    );\n}\n\nSmallSlider.defaultProps = {\n    unit: '',\n    min: 0,\n    max: 100,\n    step: 1,\n    default: 0,\n    value: 0,\n    disabled: false,\n}\n\n\n"],"sourceRoot":""}