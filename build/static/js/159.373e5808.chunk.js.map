{"version":3,"sources":["controllers/properties/color.js"],"names":["useStyles","makeStyles","wide","width","indent","paddingLeft","paddingRight","button","minWidth","minHeight","revealIcon","height","color","sketchPickerStyles","default","picker","boxShadow","sl2sb","h","SL","s","l","SB","hue","saturation","brightness","t","sb2sl","Color","props","console","log","interface","value","sl","classes","useState","setColor","openDialog","setOpenDialog","closeDialog","useEffect","undefined","variant","size","onClick","style","className","open","close","maxWidth","fullWidth","disableAlpha","styles","onChangeComplete","event","hsl","live","sendsb","directive","defaultProps"],"mappings":"sTAOMA,EAAYC,YAAW,CAEzBC,KAAM,CACFC,MAAO,QAEXC,OAAQ,CACJC,YAAa,GACbC,aAAc,GAElBC,OAAQ,CACJC,SAAU,GACVC,UAAW,IAEfC,WAAY,CACRC,OAAQ,GACRR,MAAO,GACPS,MAAO,YAITC,EAAqB,CACzBC,QAAS,CACPC,OAAQ,CACNC,UAAW,UAKJC,EAAQ,SAACL,GACNA,EAAMM,EAAlB,IAAIC,EAAmBP,EAAMQ,EAAzBD,EAA8BP,EAAMS,EACpCC,EAAK,CAACC,IAAIX,EAAMM,EAAGM,WAAW,EAAGC,WAAW,GAC5CC,EAAIP,GAAQA,EAAK,GAAMA,EAAO,EAAEA,GAGpC,OAFAG,EAAGG,WAAaN,EAAKO,EACrBJ,EAAGE,WAAaL,EAAK,EAAI,EAAEO,EAAEJ,EAAGG,WAAaH,EAAGE,WACzCF,GAGEK,EAAQ,SAACf,GAEJA,EAAMW,IAApB,IAAID,EAAgCV,EAAMY,WAAtCF,EAA6DV,EAAMa,WACnEN,EAAK,CAACD,EAAEN,EAAMW,IAAKH,EAAE,EAAGC,EAAE,GAG9B,OAFAF,EAAGE,GAAK,EAAIC,GAAiBA,EAAgB,EAC7CH,EAAGC,EAAID,EAAGE,GAAGF,EAAGE,EAAE,EAAIC,EAAcA,GAAeH,EAAGE,EAAE,GAAW,EAALF,EAAGE,EAAM,EAAO,EAALF,EAAGE,GAAOF,EAAGC,EAC/ED,GAGI,SAASS,EAAMC,GAE1BC,QAAQC,IAAIF,EAAMG,UAAUpB,MAAMqB,MAAOJ,EAAMG,WAG/C,IAyBgBE,EAzBVC,EAAUnC,IALiB,EAMPoC,mBAASP,EAAMG,UAAUpB,MAAMqB,OANxB,mBAM1BrB,EAN0B,KAMnByB,EANmB,OAOGD,oBAAS,GAPZ,mBAO1BE,EAP0B,KAOdC,EAPc,KAqCjC,SAASC,IACLD,GAAc,GASlB,OAtCAE,qBAAU,gBAG4BC,IAA9Bb,EAAMG,UAAUpB,MAAMqB,MACtBI,EAASV,EAHE,CAACJ,IAAK,KAAMC,WAAW,IAAMC,WAAY,KAMpDY,EAASV,EAAME,EAAMG,UAAUpB,MAAMqB,UAG1C,CAACJ,EAAMG,UAAUpB,MAAMqB,QA6BtB,oCACI,kBAAC,IAAD,CAAQU,QAAQ,WAAWC,KAAK,QAAQC,QAAU,kBAAMN,GAAc,IAAQO,OAnBtEZ,EAmBoFtB,EAlB5FsB,EACO,CAAE,gBAAkB,OAAOA,EAAE,EAAM,KAAc,IAARA,EAAE,EAAW,MAAe,IAARA,EAAE,EAAW,MAE9E,CAAE,gBAAkB,yBAe6Ea,UAAWZ,EAAQ5B,QAAvH,SAEA,kBAAC,IAAD,CAAQyC,KAAMV,EAAYW,MAAOT,EAAaU,SAAU,KAAMC,WAAW,GACrE,kBAAC,eAAD,CACIC,cAAY,EAACC,OAAQxC,EACrBD,MAAQA,EACR0C,iBAjChB,SAAiC1C,EAAO2C,GAEpC,GADAlB,EAASzB,EAAM4C,MACE,IAAb3B,EAAM4B,KAAa,CACnB,IAAIC,EAAOzC,EAAML,GACjBiB,EAAMG,UAAU2B,UAAU,WAAW,CAAE,MAASD,QA+B5C,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQb,QAASL,EAAa5B,MAAM,WAApC,UAGA,kBAAC,IAAD,CAAQiC,QApBxB,WACI,IAAIa,EAAOzC,EAAML,GACjBiB,EAAMG,UAAU2B,UAAU,WAAW,CAAE,MAASD,IAChDnB,GAAc,IAiB0B3B,MAAM,WAAlC,SASpBgB,EAAMgC,aAAe,CACjBH,MAAM","file":"static/js/159.373e5808.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\nimport { SketchPicker } from 'react-color'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nconst useStyles = makeStyles({\n        \n    wide: {\n        width: \"100%\",\n    },\n    indent: {\n        paddingLeft: 40,\n        paddingRight: 8,\n    },\n    button: {\n        minWidth: 96,\n        minHeight: 39,\n    },\n    revealIcon: {\n        height: 24,\n        width: 24,\n        color: \"FFE4B5\",\n    }\n});\n\nconst sketchPickerStyles = {\n  default: {\n    picker: { // See the individual picker source for which keys to use\n      boxShadow: 'none',\n    },\n  },\n}\n\nexport const sl2sb = (color) => {\n    var SL = {h:color.h, s:color.s, l:color.l};\n    var SB = {hue:color.h, saturation:0, brightness:0};\n    var t = SL.s * (SL.l<0.5 ? SL.l : 1-SL.l);\n    SB.brightness = SL.l+t;\n    SB.saturation = SL.l>0 ? 2*t/SB.brightness : SB.saturation ;\n    return SB\n}    \n\nexport const sb2sl = (color) => {\n    \n    var SB = {hue:color.hue, saturation:color.saturation, brightness:color.brightness};\n    var SL = {h:color.hue, s:0, l:0};\n    SL.l = (2 - SB.saturation) * SB.brightness / 2;\n    SL.s = SL.l&&SL.l<1 ? SB.saturation*SB.brightness/(SL.l<0.5 ? SL.l*2 : 2-SL.l*2) : SL.s;\n    return SL\n}\n\nexport default function Color(props) {\n    \n    console.log(props.interface.color.value, props.interface)\n\n\n    const classes = useStyles();\n    const [color, setColor] = useState(props.interface.color.value);\n    const [openDialog, setOpenDialog] = useState(false);\n    \n    useEffect(() => {\n        const reveal = {hue: 43.5, saturation:0.27, brightness: 1}\n        \n        if (props.interface.color.value===undefined) {\n            setColor(sb2sl(reveal))\n        } else {\n            //setColor(sb2sl(props.interface.color.value.color))\n            setColor(sb2sl(props.interface.color.value))\n        }\n\n    }, [props.interface.color.value]);\n\n\n    function handleColorSliderChange(color, event) {\n        setColor(color.hsl);\n        if (props.live===true) {\n            var sendsb=sl2sb(color)\n            props.interface.directive('SetColor',{ \"color\": sendsb })\n        }\n    }\n\n    function gethsl(sl) {\n        if (sl) {\n            return { \"backgroundColor\":\"hsl(\"+sl['h']+\", \"+(sl['s']*100)+\"%, \"+(sl['l']*100)+\"%)\"}\n        }\n        return { \"backgroundColor\":\"hsl(255, 100%, 100%)\"}\n    }\n    \n    function closeDialog() {\n        setOpenDialog(false)\n    }\n    \n    function saveColor() { \n        var sendsb=sl2sb(color)\n        props.interface.directive('SetColor',{ \"color\": sendsb })\n        setOpenDialog(false)\n    }\n\n    return (\n        <>\n            <Button variant=\"outlined\" size=\"small\" onClick={ () => setOpenDialog(true) } style={gethsl(color)} className={classes.button }> &nbsp;\n            </Button>\n            <Dialog open={openDialog} close={closeDialog} maxWidth={'xs'} fullWidth={false} >\n                <SketchPicker\n                    disableAlpha styles={sketchPickerStyles}\n                    color={ color }\n                    onChangeComplete={ handleColorSliderChange }\n                />\n                <DialogActions>\n                    <Button onClick={closeDialog} color=\"primary\">\n                        CANCEL\n                    </Button>\n                    <Button onClick={saveColor} color=\"primary\">\n                        OK\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nColor.defaultProps = {\n    live: false\n}\n\n"],"sourceRoot":""}