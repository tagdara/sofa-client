{"version":3,"sources":["SofaSlider.js","ModeLines.js","devices/TvRemote.js","devices/Television.js"],"names":["useStyles","makeStyles","half","alignItems","display","height","flexGrow","flexBasis","boxSizing","stack","justifyContent","flexWrap","width","marginRight","overflowX","overflowY","paddingRight","padLeft","paddingLeft","slider","margin","SofaSlider","props","classes","useState","value","setValue","useEffect","style","minWidth","className","name","variant","smallText","stackLabel","unit","Array","isArray","Math","floor","step","min","max","onChange","event","preChange","onChangeCommitted","change","disabled","defaultProps","default","tabs","theme","titleBar","color","palette","primary","contrastText","backgroundColor","main","select","ModeLines","useContext","DeviceContext","modes","getModes","deviceByEndpointId","device","endpointId","exclude","Object","keys","map","mode","key","displayEmpty","e","modechoice","directive","handleModeChoice","target","gridList","maxWidth","background","gridButtonTile","remoteButton","TvRemote","handleRemoteButton","buttonName","console","log","RemoteController","cellHeight","cols","onClick","list","bottomListItem","Television","mute","setMute","showRemote","setShowRemote","showDetail","setShowDetail","volume","setVolume","PowerController","powerState","setPowerState","inputs","getInputs","hasOwnProperty","SpeakerController","wide","listItem","friendlyName","secondary","InputController","input","checked","Audio","listItemBottom","noback","avatarState","defaultValue","inputname","inp","remoteListItem","React","memo"],"mappings":"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","file":"static/js/106.a56a9d3a.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n         \n    half: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: 42,\n        flexGrow: 1,\n        flexBasis: 0,\n        boxSizing: \"border-box\",\n    },\n    stack: {\n        height: \"auto\",\n        display: \"flex\",\n        flexGrow: 1,\n        justifyContent: \"space-between\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        marginRight: 8,\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n        alignItems: \"center\",\n        paddingRight: 8,\n    },\n    padLeft: {\n        paddingLeft: 16,\n    },\n    slider: {\n        margin: \"-18px\"\n    }\n\n});\n\nexport default function SofaSlider(props) {\n    \n    const classes = useStyles();\n    const [value, setValue] = useState(0)\n    \n    useEffect(() => {\n        if (props.value) {\n            setValue(props.value)\n        }\n    }, [props.value]);\n\n    \n    function handlePreChange(event, value) {\n        setValue(value);\n        if (props.preChange) {\n            props.preChange(value);\n        }\n    }; \n\n    function handleChange(event,value) {\n        props.change(value);\n    }; \n   \n    function unitDisplay() {\n        if (Array.isArray(value)) {\n            return Math.floor(value[0])+' - '+ Math.floor(value[1])+props.unit\n        } else {\n            return Math.floor(value)+props.unit\n        }\n    }\n   \n    return (\n        <div style={{ \"minWidth\": props.minWidth }} className={ props.padLeft ? classes.stack+\" \"+classes.padLeft: ( props.half ? classes.half : classes.stack) } >\n        { props.name ?\n            <Typography variant={ props.smallText ? \"caption\" : \"subtitle1\" } className={classes.stackLabel} >{props.name}</Typography>\n        :   null }\n        { props.unit ?\n            <Typography variant=\"caption\" className={classes.stackLabel} >{unitDisplay()}</Typography>\n        : null }\n            <Slider\n                value={value} step={props.step} \n                min={props.min} max={props.max}\n                onChange={handlePreChange}\n                onChangeCommitted={handleChange}\n                disabled={props.disabled}\n            />\n        </div>\n    );\n}\n\nSofaSlider.defaultProps = {\n    name: '',\n    unit: '',\n    min: 0,\n    max: 100,\n    step: 1,\n    default: 0,\n    value: 0,\n    tabs: '',\n    disabled: false,\n    padLeft: false,\n    half: false,\n    minWidth: 240,\n    smallText: false,\n}\n\n\n","import React, { useContext}  from 'react';\nimport { DeviceContext } from './DataContext/DeviceProvider';\nimport { makeStyles } from '@material-ui/styles';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\n\nconst useStyles = makeStyles(theme => {\n    \n    return {    \n        titleBar: {\n            width: \"100%\",\n            color: theme.palette.primary.contrastText,\n            backgroundColor: theme.palette.primary.main,\n        },\n        select: {\n            minWidth: \"50%\",\n        }\n    }\n\n});\n\nexport default function ModeLines(props) {\n\n    const classes = useStyles();\n    const { getModes, deviceByEndpointId } = useContext(DeviceContext);\n    const device=deviceByEndpointId(props.device.endpointId)\n    const modes=getModes(device, props.exclude)\n    \n    function handleModeChoice(event, mode, modechoice) {\n        props.directive(props.device.endpointId, mode, 'SetMode', { \"mode\": modechoice })\n    }; \n\n    return (\n        Object.keys(modes).map(mode => \n            <ListItem key={mode}>\n                <ListItemText primary={mode} key={mode} />\n                <Select disabled={props.disabled} className={classes.select} displayEmpty value={props.device[mode].mode.value ? props.device[mode].mode.value : \"\"} onChange={ (e) => handleModeChoice(e, mode, e.target.value)} >\n                    { Object.keys(modes[mode]).map(modechoice => \n                        <MenuItem key = { modes[mode][modechoice] } value={modechoice}>{modes[mode][modechoice]}</MenuItem>\n                    )}\n                </Select>\n            </ListItem>\n        )\n    )\n}\n\nModeLines.defaultProps = {\n  exclude: [],\n  disabled: false,\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport Button from '@material-ui/core/Button';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nconst useStyles = makeStyles(theme => {\n    \n    return {\n        gridList: { \n            maxWidth: 320,\n            margin: \"0 auto !important\",\n            backgroundColor: theme.palette.background.default,\n        },\n        gridButtonTile: {\n            width: \"100%\",\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        remoteButton: {\n            width: \"100%\",\n            flexGrow: 1,\n            height: \"100%\",\n        },\n    }\n});\n\n\nexport default function TvRemote(props) {\n    \n    const classes = useStyles();\n\n    function handleRemoteButton(buttonName) {\n        console.log('sending button',  buttonName)\n        props.device.RemoteController.directive('PressRemoteButton', { 'buttonName' : buttonName })\n    };\n\n    return (\n        <GridList cellHeight={80} className={classes.gridList} cols={3}>\n            <GridListTile cols={1}>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorUp')}>\n                    <ExpandLessIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorLeft')}>\n                    <ChevronLeftIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('DpadCenter')}>\n                    <FullscreenIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorRight')}>\n                    <ChevronRightIcon />\n                </Button>\n            </GridListTile>\n\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('CursorDown')}>\n                    <ExpandMoreIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('Exit')}>\n                    <ArrowBackIcon />\n                </Button>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n            </GridListTile>\n            <GridListTile cols={1} className={classes.gridButtonTile}>\n                <Button className={classes.remoteButton} onClick={ (e) => handleRemoteButton('Home')}>\n                    <HomeIcon />\n                </Button>\n            </GridListTile>\n        </GridList>\n    );\n\n}\n\n","import React,{ useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { DeviceContext } from '../DataContext/DeviceProvider';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport Switch from '@material-ui/core/Switch';\nimport TvIcon from '@material-ui/icons/Tv';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport ControlCameraIcon from '@material-ui/icons/ControlCamera';\n\nimport SofaSlider from '../SofaSlider'\nimport GridItem from '../GridItem'\nimport ToggleAvatar from '../ToggleAvatar'\nimport TvRemote from './TvRemote';\nimport ErrorBoundary from '../ErrorBoundary';\nimport ModeLines from '../ModeLines'\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles({\n    list: {\n        width: \"100%\",\n    },\n    bottomListItem: {\n        flexWrap: \"wrap\",\n        justifyContent: \"flex-end\",\n    },\n    select: {\n        minWidth: \"50%\",\n    },\n});\n\n\n\nexport function Television(props) {\n    \n    const classes = useStyles();\n    const [mute, setMute] = useState(false);\n    const [showRemote, setShowRemote] = useState(false)\n    const [showDetail, setShowDetail] = useState(false);\n    const [volume, setVolume] = useState(0);\n    const [powerState, setPowerState] = useState(props.device.PowerController.powerState.value);\n    const { deviceByEndpointId, directive, getInputs} = useContext(DeviceContext);\n    const device=deviceByEndpointId(props.device.endpointId)\n    const inputs=getInputs(device)  \n    \n    useEffect(() => {\n        if (props.device.hasOwnProperty('SpeakerController')) {\n            setVolume(props.device.SpeakerController.volume.value);\n            setMute(props.device.SpeakerController.mute.value);\n        }\n    }, [props.device])\n\n    function handlePreVolumeChange(event) {\n        setVolume(event);\n    }; \n\n    function handleVolumeChange(event) {\n        setVolume(event);\n        directive(props.device.endpointId,\"SpeakerController\", 'SetVolume', { \"volume\" : event} )\n    }; \n\n    function handleMuteChange(event) {\n        directive(props.device.endpointId,\"SpeakerController\", 'SetVolume', { \"mute\" : event} )\n    }; \n    \n    function handlePowerChange(event) {\n        setPowerState(event.target.checked);\n        directive(props.device.endpointId,\"PowerController\", event.target.checked ? 'TurnOn' : 'TurnOff')\n    };\n\n    function handleInput(event, inputname) {\n       directive(props.device.endpointId,\"InputController\", 'SelectInput', { \"input\": inputname } )\n    }; \n\n    function toggleRemote() {\n        setShowRemote(!showRemote)\n    }\n    \n    function localVolumeCheck() {\n        if ( props.device.hasOwnProperty('SpeakerController') ) {\n            if ( props.device.hasOwnProperty('Audio') ) {\n                if (props.device.Audio.mode.value===\"Audio.audioSystem\") {\n                    return true\n                } else {\n                    return false\n                }\n            } else {\n                return true\n            }\n        }\n        \n        return false\n\n    }\n     \n    return (\n        <GridItem wide={props.wide}>\n            <ListItem className={classes.listItem}>\n                <ListItemIcon onClick={ () => setShowDetail(!showDetail) } ><TvIcon /></ListItemIcon>\n            <ErrorBoundary>\n                <ListItemText onClick={ () => setShowDetail(!showDetail) } primary={props.device.friendlyName} secondary={props.device.PowerController.powerState.value!=='ON' ? 'Off' : props.device.InputController.input.value}/>\n            </ErrorBoundary>\n                <ListItemSecondaryAction>\n                    { props.device.PowerController.powerState.value!=='ON' ? null :\n                    <IconButton onClick={ () => toggleRemote() } >\n                        <ControlCameraIcon />\n                    </IconButton>\n                    }\n\n                    <Switch color=\"primary\" checked={props.device.PowerController.powerState.value==='ON'} onChange={ (e) => handlePowerChange(e) } />\n                </ListItemSecondaryAction>\n            </ListItem>\n        { localVolumeCheck() && powerState==='ON' && showDetail ?\n            <ListItem className={classes.listItemBottom}>\n                <ToggleAvatar noback={true} onClick={ () => handleMuteChange(!props.device.SpeakerController.mute.value)} avatarState={ props.device.PowerController.powerState.value==='ON' ? \"on\" : \"off\" }>\n                    {mute ? <VolumeOffIcon /> : <VolumeUpIcon /> }\n                </ToggleAvatar>\n                <SofaSlider name=\"Volume\" unit=\"%\" min={0} max={100} defaultValue={0} step={1} value={volume}\n                            minWidth={240} preChange={handlePreVolumeChange} change={handleVolumeChange} padLeft={false} />\n            </ListItem>\n            : null\n        }\n        { showDetail &&\n            <ListItem className={classes.bottomListItem}>\n                <ListItemText primary={\"Input\"} />\n                <Select disabled={props.device.PowerController.powerState.value!=='ON'} className={classes.select} displayEmpty value={props.device.InputController.input.value ? props.device.InputController.input.value : \"\"} onChange={ (e) => handleInput(e, e.target.value) } >\n                    { inputs.map(inp =>\n                        <MenuItem key={inp} value={inp}>{inp}</MenuItem>\n                    )}\n                </Select>\n            </ListItem>\n        }\n        { showDetail &&\n            <ModeLines disabled={props.device.PowerController.powerState.value!=='ON'} device={props.device} />\n        }\n        { showRemote &&\n            <ListItem className={classes.remoteListItem}>\n                <TvRemote device={props.device} />\n            </ListItem>\n        }\n        </GridItem>\n    )\n}\n\nexport default React.memo(Television);"],"sourceRoot":""}