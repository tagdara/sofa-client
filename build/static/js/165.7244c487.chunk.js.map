{"version":3,"sources":["ToggleButton.js","ModeChips.js"],"names":["useStyles","makeStyles","theme","off","minWidth","marginLeft","on","backgroundColor","palette","primary","light","main","color","contrastText","ToggleButton","props","classes","size","className","buttonState","onClick","label","children","ModeChips","getModes","modes","k","device","interfaces","length","controller","mc","modename","capabilityResources","friendlyNames","value","text","exclude","includes","modechoices","j","configuration","supportedModes","modeResources","Object","keys","map","mode","key","modechoice","chipState","e","event","directive","handleModeChoice","defaultProps"],"mappings":"wHAAA,oFAIMA,EAAYC,aAAW,SAAAC,GACzB,MAAO,CACHC,IAAK,CACDC,SAAU,GACVC,WAAY,GAEhBC,GAAI,CACAD,WAAY,EACZD,SAAU,GACV,UAAY,CACRG,gBAAiBL,EAAMM,QAAQC,QAAQC,OAE3CH,gBAAiBL,EAAMM,QAAQC,QAAQE,KACvCC,MAAOV,EAAMM,QAAQC,QAAQI,kBAK1B,SAASC,EAAaC,GAEjC,IAAMC,EAAUhB,IAEhB,OACI,kBAAC,IAAD,CAAQiB,KAAK,QAAQC,UAAYF,EAAQD,EAAMI,aAAeC,QAAUL,EAAMK,SACzEL,EAAMM,MAAQN,EAAMM,MAAQN,EAAMO,Y,iCC5B/C,4FAMe,SAASC,EAAUR,GAM9B,SAASS,IAGL,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIX,EAAMY,OAAOC,WAAWC,OAAQH,IAChD,GAA0D,mBAAtDX,EAAMY,OAAOZ,EAAMY,OAAOC,WAAWF,IAAII,WAA+B,CACxE,IAAIC,EAAGhB,EAAMY,OAAOZ,EAAMY,OAAOC,WAAWF,IACxCM,EAASD,EAAGE,oBAAoBC,cAAc,GAAGC,MAAMC,KAC3D,GAAIrB,EAAMsB,UAAYtB,EAAMsB,QAAQC,SAASN,GAAW,CAEpD,IADA,IAAIO,EAAY,GACPC,EAAI,EAAGA,EAAIT,EAAGU,cAAcC,eAAeb,OAAQW,IACxDD,EAAYR,EAAGU,cAAcC,eAAeF,GAAGL,OAASJ,EAAGU,cAAcC,eAAeF,GAAGG,cAAcT,cAAc,GAAGC,MAAMC,KAEpIX,EAAMO,GAAUO,GAI5B,OAAOd,EAGX,OACImB,OAAOC,KAAKrB,KAAYsB,KAAI,SAAAC,GAAI,OAC5B,kBAAC,IAAD,CAAUC,IAAKD,GACX,kBAAC,IAAD,CAActC,QAASsC,EAAMC,IAAKD,IAChCH,OAAOC,KAAKrB,IAAWuB,IAAOD,KAAI,SAAAG,GAAU,OAC1C,kBAAC,UAAD,CAAYD,IAAQC,EAAa5B,MAAUG,IAAWuB,GAAME,GAAcC,UAAYnC,EAAMY,OAAOoB,GAAMA,KAAKZ,QAAQc,EAAa,KAAO,MAAO7B,QAAU,SAAC+B,GAAD,OA5B3K,SAA0BC,EAAOL,EAAME,GACnClC,EAAMY,OAAOoB,GAAMM,UAAU,UAAW,CAAE,KAAQJ,IA2B4HK,CAAiBH,EAAGJ,EAAME,aAOhN1B,EAAUgC,aAAe,CACvBlB,QAAS","file":"static/js/165.7244c487.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => {\n    return {        \n        off: {\n            minWidth: 36,\n            marginLeft: 2,\n        },\n        on: {\n            marginLeft: 2,\n            minWidth: 36,\n            \"&:hover\" : {\n                backgroundColor: theme.palette.primary.light,\n            },\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.primary.contrastText,\n        },\n    }\n});\n\nexport default function ToggleButton(props) {\n\n    const classes = useStyles();\n    \n    return (\n        <Button size=\"small\" className={ classes[props.buttonState] } onClick={ props.onClick} >\n            {props.label ? props.label : props.children}\n        </Button>\n    )\n};\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport ToggleChip from './ToggleButton'\n\nexport default function ModeChips(props) {\n\n    function handleModeChoice(event, mode, modechoice) {\n        props.device[mode].directive('SetMode', { \"mode\": modechoice })\n    }; \n\n    function getModes() {\n        \n        var modes={}\n        for (var k = 0; k < props.device.interfaces.length; k++) {\n            if (props.device[props.device.interfaces[k]].controller==='ModeController') {\n                var mc=props.device[props.device.interfaces[k]]\n                var modename=mc.capabilityResources.friendlyNames[0].value.text\n                if (props.exclude && !props.exclude.includes(modename)) {\n                    var modechoices=[]\n                    for (var j = 0; j < mc.configuration.supportedModes.length; j++) {\n                        modechoices[mc.configuration.supportedModes[j].value] = mc.configuration.supportedModes[j].modeResources.friendlyNames[0].value.text\n                    }\n                    modes[modename]=modechoices\n                }\n            }\n        }\n        return modes\n    }\n   \n    return (\n        Object.keys(getModes()).map(mode => \n            <ListItem key={mode}>\n                <ListItemText primary={mode} key={mode} />\n                { Object.keys(getModes()[mode]).map(modechoice => \n                    <ToggleChip key = { modechoice } label = { getModes()[mode][modechoice] } chipState={ props.device[mode].mode.value===modechoice ? \"on\" : \"off\"} onClick={ (e) => handleModeChoice(e, mode, modechoice)} />\n                )}\n            </ListItem>\n        )\n    )\n}\n\nModeChips.defaultProps = {\n  exclude: [],\n};"],"sourceRoot":""}