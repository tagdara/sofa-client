{"version":3,"sources":["automation/AutomationInput.js","automation/operatorButton.js","automation/automationCondition.js"],"names":["AutomationInput","withStyles","theme","input","minWidth","borderRadius","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","borderColor","boxShadow","InputBase","useStyles","makeStyles","button","maxWidth","marginLeft","fontWeight","bigtext","operators","OperatorButton","props","classes","useState","anchor","setAnchor","Fragment","id","index","onClick","event","currentTarget","className","disabled","value","anchorEl","open","Boolean","onClose","map","option","key","selected","indexOf","item","setOperator","marginTop","flexGrow","flexBasis","deviceName","listItem","flex","display","wideSelect","width","AutomationCondition","interfaceobj","undefined","device","hasOwnProperty","j","capabilities","length","interface","split","controller","instance","console","log","getInterface","loadPropMod","propertyName","propMod","setPropMod","directive","endpointId","controllerName","command","payload","save","name","React","lazy","catch","default","modulename","placeholder","directives","otherdev","dev","dirs","shortIf","concat","Object","keys","controllerProperties","nolist","elevation","wide","xs","selectDevice","newdevice","newitem","directiveName","actionValues","av","propertyFromDirective","friendlyName","remove","reorder","moveUp","moveDown","delete","onChange","e","newval","target","controllerForProperty","action","operator","Module","fallback","renderSuspenseModule"],"mappings":"wHAAA,6BAGMA,EAAkBC,aAAW,SAAAC,GAAK,MAAK,CACzCC,MAAO,CACHC,SAAU,QACVC,aAAc,EACdC,SAAU,WACVC,gBAAiBL,EAAMM,QAAQC,WAAWC,MAC1CC,OAAQ,oBACRC,SAAU,GACVC,QAAS,sBACTC,WAAYZ,EAAMa,YAAYC,OAAO,CAAC,eAAgB,eACtD,UAAW,CACPX,aAAc,EACdY,YAAa,UACbC,UAAW,wCAbCjB,CAgBpBkB,KAEWnB,a,8ICbToB,EAAYC,YAAW,CAEzBC,OAAQ,CACJC,SAAU,GACVnB,SAAU,GACVoB,WAAY,EACZZ,SAAU,GACVa,WAAY,QAEhBC,QAAS,CACLd,SAAU,GACVa,WAAY,UAKdE,EAAY,CACd,IACA,KACA,IACA,KACA,IACA,MAGW,SAASC,EAAeC,GAEnC,IAAMC,EAAUV,IAF0B,EAGdW,mBAAS,MAHK,mBAGnCC,EAHmC,KAG3BC,EAH2B,KAmB1C,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAQC,GAAI,KAAKN,EAAMO,MAAOC,QAftC,SAAqBC,GACjBL,EAAUK,EAAMC,gBAcwCC,UAAWV,EAAQR,OAAQmB,SAAUZ,EAAMY,UAC1FZ,EAAMa,MAAQb,EAAMa,MAAQ,KAGjC,kBAAC,IAAD,CAAMP,GAAG,YAAYQ,SAAUX,EAAQY,KAAMC,QAAQb,GAASc,QAftE,SAAqBR,GACjBL,EAAU,QAeDN,EAAUoB,KAAI,SAACC,EAAQZ,GAAT,OACX,kBAAC,IAAD,CACIa,IAAKD,EACLE,SAAUd,IAAUT,EAAUwB,QAAQtB,EAAMa,OAC5CL,QAAS,SAAAC,GAAK,OAhBDc,EAgB6BhB,EAf1DH,EAAU,WACVJ,EAAMwB,YAAY1B,EAAUyB,IAFhC,IAAiCA,GAiBbZ,UAAWV,EAAQJ,SAElBsB,U,yMCrDnB5B,EAAYC,YAAW,CAEzBlB,MAAO,CACHmD,UAAU,EACV9B,WAAY,EACZ+B,SAAS,EACTC,UAAU,GAEdC,WAAY,CACRF,SAAS,EACTC,UAAU,EACV3C,QAAS,GAEb6C,SAAU,CACN7C,QAAS,SAEb8C,KAAM,CACFC,QAAS,QAEbC,WAAY,CACRC,MAAO,UAKA,SAASC,EAAoBlC,GAExC,IAAMC,EAAUV,IACV4C,EAWN,WAEI,QAAmBC,IAAfpC,EAAMqC,OAAsB,OAChC,GAAIrC,EAAMqC,OAAOC,eAAe,gBAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIvC,EAAMqC,OAAOG,aAAaC,OAAQF,IAClD,GAAIvC,EAAMqC,OAAOG,aAAaD,GAAGG,UAAUC,MAAM,KAAK,KAAK3C,EAAMuB,KAAKqB,WAAY,CAC9E,QAA0BR,IAAtBpC,EAAMuB,KAAKsB,eAA0ET,IAAlDpC,EAAMqC,OAAOG,aAAaD,GAAGG,UAAUG,SAC1E,OAAO7C,EAAMqC,OAAOG,aAAaD,GAErC,GAAIvC,EAAMuB,KAAKe,eAAe,aAAetC,EAAMqC,OAAOG,aAAaD,GAAGD,eAAe,aACjFtC,EAAMuB,KAAKsB,WAAW7C,EAAMqC,OAAOG,aAAaD,GAAGM,SAASF,MAAM,KAAK,GACvE,OAAO3C,EAAMqC,OAAOG,aAAaD,GAOrD,YADAO,QAAQC,IAAI,uBAAuB/C,EAAMuB,KAAKqB,WAAY5C,EAAMuB,KAAKsB,SAAU7C,EAAMqC,QA5BtEW,GAH4B,EAIjB9C,mBAAS+C,EAAYjD,EAAMuB,KAAK2B,eAJf,mBAIxCC,EAJwC,KAI/BC,EAJ+B,KAQ/C,SAASC,EAAWC,EAAYC,EAAgBC,GAA2C,IAAlCC,EAAiC,uDAAzB,GAAeZ,GAAU,gGACxE,WAAVW,IAAsBC,EAAQ,MACpB,YAAVD,IAAuBC,EAAQ,OACnCzD,EAAM0D,KAAK1D,EAAMO,MAAjB,eAA4BP,EAAMuB,KAAlC,CAAwCqB,WAAWW,EAAgBC,QAAQA,EAASX,SAAUA,EAAUhC,MAAO4C,KAwBnH,SAASR,EAAYU,GASjB,OARSC,IAAMC,MAAK,WACZ,IACI,OAAO,OAAO,KAA6BF,GAAMG,OAAM,iBAAO,CAAEC,QAAS,kBASrEC,EATsFL,EAU/F,kBAAC,IAAD,CAAW9C,MAAO,SAASmD,IADtC,IAAoBA,OAPR,SACI,OAAO,kBAAC,IAAD,CAAWnD,MAAO,UAAU8C,QAUnD,SAASM,EAAYD,GACjB,OAAO,kBAAC,IAAD,CAAWnD,MAAOmD,IA2B7B,SAASE,EAAWC,GAEhB,IAAIC,EAAIpE,EAAMqC,OACV8B,IAAYC,EAAID,GACpB,IAAIE,EAAK,GACT,GAAID,EAAI9B,eAAe,gBACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI6B,EAAI5B,aAAaC,OAAQF,IAAK,CAC9C,IAAI+B,EAAQF,EAAI5B,aAAaD,GAAGG,UAAUC,MAAM,KAAK,GACvC,mBAAV2B,EACAD,EAAKA,EAAKE,OAAO,WAAWH,EAAI5B,aAAaD,GAAGM,SAASF,MAAM,KAAK,IAC7D3C,EAAMkE,WAAW5B,eAAegC,KACvCD,EAAKA,EAAKE,OAAOC,OAAOC,KAAKzE,EAAMkE,WAAWI,MAI1D,OAAOD,EAyBX,OAjHAvB,QAAQC,IAAI,YAAa/C,EAAM0E,sBAkH3B,kBAAC,UAAD,CAAUC,QAAQ,EAAMC,UAAW,EAAGC,MAAM,EAAMC,GAAI,IAClD,kBAAC,UAAD,CAAoBzC,OAAQrC,EAAMqC,OAAQ9B,MAAOP,EAAMO,MAAOwE,aAXtE,SAAsBC,GAElB,IAAIC,EADJnC,QAAQC,IAAI,sBAAsBiC,GAElC5B,EAAWH,EAhBf,SAA+BM,EAAgB2B,GAC3C,QAAqB9C,IAAjBmB,QAA8CnB,IAAhB8C,GAG9BlF,EAAMkE,WAAW5B,eAAeiB,IAAmBvD,EAAMkE,WAAWX,GAAgBjB,eAAe4C,GAAgB,CACnH,IAAIC,EAAenF,EAAMkE,WAAWX,GAAgB2B,GACpD,IAAK,IAAIE,KAAMD,EACX,OAAOC,GASQC,CAAsBL,EAAUxC,aAAa,GAAGE,UAAWwB,EAAWc,EAAUxC,aAAa,GAAGE,WAAW,MAClIuC,EAAQ,eAAIjF,EAAMuB,KAAX,CAAiBsB,SAAUmC,EAAUxC,aAAa,GAAGK,SAAUc,KAAKqB,EAAUM,aAAchC,WAAY0B,EAAU1B,WAAYV,WAAWoC,EAAUxC,aAAa,GAAIgB,QAAQU,EAAWc,EAAUxC,aAAa,GAAGE,WAAW,GAAI7B,WAAOuB,IAC9OpC,EAAM0D,KAAK1D,EAAMO,MAAO0E,IAMsEJ,KAAM7E,EAAM6E,KAClFU,OAAQvF,EAAMuF,OAAQC,QAASxF,EAAMwF,QACrCC,OAAQzF,EAAMyF,OAAQC,SAAU1F,EAAM0F,SAAUC,OAAQ3F,EAAM2F,cACjEvD,IAAfpC,EAAMqC,QACJ,kBAAC,IAAD,CAAMd,MAAI,EAACuD,GAAI9E,EAAM6E,KAAO,GAAK,EAAIlE,UAAWV,EAAQ6B,MACpD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQnB,UAAWV,EAAQ+B,WAAYnB,MAAOb,EAAMuB,KAAK2B,aACjD0C,SAAU,SAACC,GAAD,OAtDJC,EAsDoCD,EAAEE,OAAOlF,MArD3EuC,EAAWH,EAAY6C,SACvB9F,EAAM0D,KAAK1D,EAAMO,MAAjB,eAA4BP,EAAMuB,KAAlC,CAAwC,WAASa,EAAW,WAAapC,EAAMgG,sBAAsBhG,EAAMqC,OAAOiB,WAAYwC,GAAS,aAAgBA,KAF3J,IAAkCA,GAuDNxH,MAAO,kBAAC,UAAD,CAAiBqF,KAAK,UAAUrD,GAAG,oBAChDN,EAAM0E,qBAAqBxD,KAAI,SAAA+E,GAAM,OACnC,kBAAC,IAAD,CAAU7E,IAAKpB,EAAMqC,OAAOiB,WAAW2C,EAAQpF,MAAOoF,GAASA,OAGnE,kBAAC,UAAD,CAAgB1F,MAAOP,EAAMO,MAAOM,MAAOb,EAAMuB,KAAK2E,SAAWlG,EAAMuB,KAAK2E,SAAW,IAAM1E,YAhEjH,SAA2BX,GACvBb,EAAM0D,KAAK1D,EAAMO,MAAjB,eAA4BP,EAAMuB,KAAlC,CAAwC,SAAYV,eAmE9BuB,IAAfpC,EAAMqC,aAAgDD,IAA1BpC,EAAMuB,KAAK2B,cACtC,kBAAC,IAAD,CAAM3B,MAAI,EAACuD,GAAI9E,EAAM6E,KAAO,GAAK,EAAIlE,UAAWV,EAAQ6B,MACpD,kBAAC,IAAD,KArFhB,SAA+BkC,GAE3B,QAAc5B,IAAVe,EAAqB,CACrB,GAAc,OAAVA,EACA,OAAO,KAEX,IAAIgD,EAAOhD,EACX,OAAQ,kBAAC,WAAD,CAAU/B,IAAM4C,EAAaoC,SAAWnC,KACpC,kBAACkC,EAAD,CAAQ5E,KAAMvB,EAAMuB,KAAMmB,UAAYP,EAAeE,OAAQrC,EAAMqC,OAAQQ,SAAU7C,EAAMuB,KAAKsB,SAAUQ,UAAWA,KAGjI,OAAO,kBAAC,IAAD,CAAWxC,MAAO,eA2EXwF,CAAqBrG,EAAMuB,KAAK2B","file":"static/js/121.db240692.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/styles';\nimport InputBase from '@material-ui/core/InputBase';\n\nconst AutomationInput = withStyles(theme => ({\n    input: {\n        minWidth: '100px',\n        borderRadius: 4,\n        position: 'relative',\n        backgroundColor: theme.palette.background.paper,\n        border: '1px solid #ced4da',\n        fontSize: 16,\n        padding: '10px 26px 10px 12px',\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\n        '&:focus': {\n            borderRadius: 4,\n            borderColor: '#80bdff',\n            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n        },\n    },\n}))(InputBase);\n\nexport default AutomationInput\n","import React from 'react';\nimport { useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nconst useStyles = makeStyles({\n        \n    button: {\n        maxWidth: 64,\n        minWidth: 64,\n        marginLeft: 8,\n        fontSize: 18,\n        fontWeight: \"bold\",\n    },\n    bigtext: {\n        fontSize: 16,\n        fontWeight: \"bold\",\n    }\n    \n});\n\nconst operators = [\n    '=',\n    '!=',\n    '>',\n    '>=',\n    '<',\n    '=<',\n];\n\nexport default function OperatorButton(props) {\n\n    const classes = useStyles();\n    const [anchor, setAnchor] = useState(null)\n\n\n    function handleClick(event) {\n        setAnchor(event.currentTarget);\n    };\n    \n    function handleClose(event) {\n        setAnchor(null)\n    };\n    \n    function handleMenuSelect(event, item) {\n        setAnchor(null)\n        props.setOperator(operators[item])\n    };\n\n    return (\n        <React.Fragment>\n            <Button id={\"op\"+props.index} onClick={handleClick} className={classes.button} disabled={props.disabled}>\n                {props.value ? props.value : \"=\"}\n            </Button>\n    \n            <Menu id=\"lock-menu\" anchorEl={anchor} open={Boolean(anchor)} onClose={handleClose}>\n                {operators.map((option, index) => (\n                    <MenuItem\n                        key={option}\n                        selected={index === operators.indexOf(props.value)}\n                        onClick={event => handleMenuSelect(event, index)}\n                        className={classes.bigtext}\n                    >\n                        {option}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </React.Fragment>\n    )\n}\n","import React, { Suspense, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport AutomationInput from './AutomationInput';\nimport AutomationDevice from './AutomationDevice';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport TextField from '@material-ui/core/TextField';\nimport GridItem from '../GridItem';\nimport OperatorButton from \"./operatorButton\"\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nconst useStyles = makeStyles({\n        \n    input: {\n        marginTop:0,\n        marginLeft: 8,\n        flexGrow:1,\n        flexBasis:0,\n    },\n    deviceName: {\n        flexGrow:1,\n        flexBasis:0,\n        padding: 0,\n    },\n    listItem: {\n        padding: \"12 16\",\n    },\n    flex: {\n        display: \"flex\",\n    },\n    wideSelect: {\n        width: \"100%\",\n    }\n});\n\n\nexport default function AutomationCondition(props) {\n\n    const classes = useStyles();\n    const interfaceobj=getInterface()\n    const [propMod, setPropMod] = useState(loadPropMod(props.item.propertyName))\n    \n    console.log('cp device', props.controllerProperties)\n    \n    function directive (endpointId, controllerName, command, payload={}, cookie={}, instance) {\n        if (command==='TurnOn') { payload=\"ON\"}\n        if (command==='TurnOff') { payload=\"OFF\"}\n        props.save(props.index, {...props.item, controller:controllerName, command:command, instance: instance, value: payload})\n    }\n\n    function getInterface() {\n        \n        if (props.device===undefined) { return undefined }\n        if (props.device.hasOwnProperty('capabilities')) {\n            for (var j = 0; j < props.device.capabilities.length; j++) {\n                if (props.device.capabilities[j].interface.split('.')[1]===props.item.controller) {\n                    if (props.item.instance===undefined && props.device.capabilities[j].interface.instance===undefined) {\n                        return props.device.capabilities[j]\n                    }\n                    if (props.item.hasOwnProperty('instance') && props.device.capabilities[j].hasOwnProperty('instance')) {\n                        if (props.item.instance===props.device.capabilities[j].instance.split('.')[1]) {\n                            return props.device.capabilities[j]\n                        }\n                    }               \n                }\n            }\n        }\n        console.log('failed get interface',props.item.controller, props.item.instance ,props.device)\n        return undefined\n    }\n\n    function loadPropMod(name) {\n        let pmod=React.lazy(() => { \n                try { \n                    return import('../controllers/properties/'+name).catch(() => ({ default: () => errorBlock(name) }))\n                }\n                catch {\n                    return <TextField value={'failed '+name} />\n                }\n            })\n        return pmod\n    }\n\n    function errorBlock(modulename) {\n        return <TextField value={'failed'+modulename} />\n    }\n    \n    function placeholder(modulename) {\n        return <TextField value={modulename} />\n    }\n    \n    function renderSuspenseModule( modulename ) {\n        \n        if (propMod!==undefined) {\n            if (propMod===null) {\n                return null\n            }\n            let Module=propMod\n            return  <Suspense key={ modulename } fallback={ placeholder() }>\n                        <Module item={props.item} interface={ interfaceobj } device={props.device} instance={props.item.instance} directive={directive} />\n                    </Suspense>\n        } else {\n            return <TextField value={'Loading...'} />\n        }\n    }\n     \n    function editOperatorValue(value) {\n        props.save(props.index, {...props.item, \"operator\": value})\n    }\n\n    function handleChangePropertyName(newval) {\n        setPropMod(loadPropMod(newval))\n        props.save(props.index, {...props.item, \"value\": undefined, \"controller\":props.controllerForProperty(props.device.endpointId, newval), \"propertyName\": newval })\n    }\n    \n    function directives(otherdev) {\n\n        var dev=props.device\n        if (otherdev) { dev=otherdev }\n        var dirs=[]\n        if (dev.hasOwnProperty('capabilities')) {\n            for (var j = 0; j < dev.capabilities.length; j++) {\n                var shortIf=dev.capabilities[j].interface.split('.')[1]\n                if (shortIf==='ModeController') {\n                    dirs=dirs.concat('SetMode.'+dev.capabilities[j].instance.split('.')[1])\n                } else if (props.directives.hasOwnProperty(shortIf)) {\n                    dirs=dirs.concat(Object.keys(props.directives[shortIf]));\n                } \n            }\n        }\n        return dirs\n    }   \n    \n    function propertyFromDirective(controllerName, directiveName) {\n        if (controllerName===undefined || directiveName===undefined) {\n            return undefined\n        }\n        if (props.directives.hasOwnProperty(controllerName) && props.directives[controllerName].hasOwnProperty(directiveName)) {\n            var actionValues = props.directives[controllerName][directiveName]\n            for (var av in actionValues) {\n                return av\n            }\n        }\n        return undefined\n    }    \n    \n    function selectDevice(newdevice) {\n        console.log('selected new device',newdevice)\n        var newitem={}\n        setPropMod(loadPropMod(propertyFromDirective(newdevice.capabilities[0].interface, directives(newdevice.capabilities[0].interface)[0])))\n        newitem={...props.item, instance: newdevice.capabilities[0].instance, name:newdevice.friendlyName, endpointId: newdevice.endpointId, controller:newdevice.capabilities[0], command:directives(newdevice.capabilities[0].interface)[0], value: undefined}\n        props.save(props.index, newitem)\n    }\n\n\n    return (\n        <GridItem nolist={true} elevation={0} wide={true} xs={12}>\n            <AutomationDevice   device={props.device} index={props.index} selectDevice={selectDevice} wide={props.wide}\n                                remove={props.remove} reorder={props.reorder}\n                                moveUp={props.moveUp} moveDown={props.moveDown} delete={props.delete} />\n            { props.device!==undefined &&\n                <Grid item xs={props.wide ? 12 : 4 } className={classes.flex} >\n                    <ListItem >\n                        <Select className={classes.wideSelect} value={props.item.propertyName} \n                                onChange={(e) => handleChangePropertyName(e.target.value)} \n                                input={<AutomationInput name=\"command\" id=\"command-select\" />} >\n                        { props.controllerProperties.map(action => \n                            <MenuItem key={props.device.endpointId+action} value={action}>{action}</MenuItem>\n                        )}\n                        </Select>\n                        <OperatorButton index={props.index} value={props.item.operator ? props.item.operator : \"=\" } setOperator={ editOperatorValue }/>\n                    </ListItem>\n                </Grid>\n            }\n            { (props.device!==undefined && props.item.propertyName!==undefined) &&\n                <Grid item xs={props.wide ? 12 : 4 } className={classes.flex} >\n                    <ListItem>\n                        { renderSuspenseModule(props.item.propertyName) }\n                    </ListItem>\n                </Grid>\n                }\n        </GridItem>\n    )\n}\n"],"sourceRoot":""}