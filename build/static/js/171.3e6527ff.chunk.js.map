{"version":3,"sources":["automation/automationAction.js"],"names":["useStyles","makeStyles","flex","display","wideSelect","width","BootstrapInput","withStyles","theme","input","minWidth","borderRadius","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","borderColor","boxShadow","InputBase","AutomationAction","props","classes","pfd","propertyFromDirective","controllerForDirective","item","command","useState","loadPropMod","propMod","setPropMod","interfaceProperty","controller","interfaceobj","undefined","device","hasOwnProperty","j","capabilities","length","interface","split","instance","console","log","getInterface","errorBlock","modulename","value","name","React","lazy","catch","default","controllerName","directiveName","directives","actionValues","av","otherdev","dev","dirs","shortIf","concat","Object","keys","placeholder","directive","endpointId","payload","save","index","dir","prop","nolist","elevation","wide","xs","selectDevice","newdevice","newitem","friendlyName","remove","reorder","moveUp","moveDown","delete","className","onChange","e","newval","handleChangeDirectiveName","target","id","map","action","key","Module","fallback","renderSuspenseModule","size","onClick"],"mappings":"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","file":"static/js/171.3e6527ff.chunk.js","sourcesContent":["import React, { useState, Suspense } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/styles';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport TextField from '@material-ui/core/TextField';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport AutomationDevice from './AutomationDevice';\nimport GridItem from '../GridItem';\nimport Grid from '@material-ui/core/Grid';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputBase from '@material-ui/core/InputBase';\n\nconst useStyles = makeStyles({\n\n    flex: {\n        display: \"flex\",\n    },\n    wideSelect: {\n        width: \"100%\",\n    }\n});\n\nconst BootstrapInput = withStyles(theme => ({\n    input: {\n        minWidth: '100px',\n        borderRadius: 4,\n        position: 'relative',\n        backgroundColor: theme.palette.background.paper,\n        border: '1px solid #ced4da',\n        fontSize: 16,\n        padding: '10px 26px 10px 12px',\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\n        '&:focus': {\n            borderRadius: 4,\n            borderColor: '#80bdff',\n            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n        },\n    },\n}))(InputBase);\n\n\nexport default function AutomationAction(props) {\n    \n    const classes = useStyles();\n    const pfd = propertyFromDirective(controllerForDirective(props.item.command), props.item.command)\n    const [propMod, setPropMod] = useState(loadPropMod(pfd))\n    const interfaceProperty = propertyFromDirective(props.item.controller, props.item.command)\n    const interfaceobj=getInterface()\n\n    function errorBlock(modulename) {\n        return <TextField value={'failed'+modulename} />\n    }\n\n    function loadPropMod(name) {\n\n        if (name===undefined) {\n            return null\n        }\n        let pmod=React.lazy(() => { \n            try { \n                return import('../controllers/properties/'+name).catch(() => ({ default: () => errorBlock(name) }))\n            }\n            catch {\n                return errorBlock(name)\n            }\n        })\n        return pmod\n    }\n\n    function propertyFromDirective(controllerName, directiveName) {\n        if (controllerName===undefined || directiveName===undefined) {\n            return undefined\n        }\n        if (props.directives.hasOwnProperty(controllerName) && props.directives[controllerName].hasOwnProperty(directiveName)) {\n            var actionValues = props.directives[controllerName][directiveName]\n            for (var av in actionValues) {\n                return av\n            }\n        }\n        return undefined\n    }\n    \n    function directives(otherdev) {\n\n        var dev=props.device\n        if (otherdev) { dev=otherdev }\n        var dirs=[]\n        if (dev.hasOwnProperty('capabilities')) {\n            for (var j = 0; j < dev.capabilities.length; j++) {\n                var shortIf=dev.capabilities[j].interface.split('.')[1]\n                if (shortIf==='ModeController') {\n                    dirs=dirs.concat('SetMode.'+dev.capabilities[j].instance.split('.')[1])\n                } else if (props.directives.hasOwnProperty(shortIf)) {\n                    dirs=dirs.concat(Object.keys(props.directives[shortIf]));\n                } \n            }\n        }\n        return dirs\n    }\n    \n    function placeholder(modulename) {\n        return <TextField value={modulename} />\n    }\n    \n    function renderSuspenseModule( modulename ) {\n        \n        if (propMod!==undefined) {\n            if (propMod===null) {\n                return null\n            }\n            let Module=propMod\n            return  <Suspense key={ modulename } fallback={ placeholder() }>\n                        <Module item={props.item} interface={ interfaceobj } device={props.device} instance={props.item.instance} directive={directive} />\n                    </Suspense>\n        } else {\n            return <TextField value={'Loading...'} />\n        }\n    }\n    \n    function directive (endpointId, controllerName, command, payload={}, cookie={}, instance) {\n        if (command==='TurnOn') { payload=\"ON\"}\n        if (command==='TurnOff') { payload=\"OFF\"}\n        props.save(props.index, {...props.item, controller:controllerName, command:command, instance: instance, value: payload})\n    }\n    \n    function getInterface() {\n        \n        if (props.device===undefined) { return undefined }\n        if (props.device.hasOwnProperty('capabilities')) {\n            for (var j = 0; j < props.device.capabilities.length; j++) {\n                if (props.device.capabilities[j].interface.split('.')[1]===props.item.controller) {\n                    if (props.item.instance===undefined && props.device.capabilities[j].interface.instance===undefined) {\n                        return props.device.capabilities[j]\n                    }\n                    if (props.item.hasOwnProperty('instance') && props.device.capabilities[j].hasOwnProperty('instance')) {\n                        if (props.item.instance===props.device.capabilities[j].instance.split('.')[1]) {\n                            return props.device.capabilities[j]\n                        }\n                    }               \n                }\n            }\n        }\n        console.log('failed get interface',props.item.controller, props.item.instance ,props.device)\n        return undefined\n    }\n    \n    function controllerForDirective(dir) {\n        if (props.device===undefined || dir===undefined) { return undefined }\n        \n        for (var prop in props.directives) { // This is actually the list of controllers\n            //if (props.device.interfaces.includes(prop) && props.directives[prop].hasOwnProperty(dir)) {\n            if (props.directives[prop].hasOwnProperty(dir)) {\n                return prop\n            }\n            if (props.item.hasOwnProperty('instance') && props.item.instance!==undefined) {\n                if (props.directives[prop].hasOwnProperty(props.item.command)) {\n                    return prop\n                } \n            }     \n        }\n        return undefined\n    }\n\n    function handleChangeDirectiveName(newval) {\n        var directiveName=newval\n        //if (newval.startsWith('SetMode.')) {\n        //    directiveName=\"SetMode\"\n        //}\n        setPropMod(loadPropMod(propertyFromDirective(controllerForDirective(directiveName.split('.')[0]), directiveName.split('.')[0])))\n        props.save(props.index, {...props.item, controller:controllerForDirective(directiveName.split('.')[0]), command:directiveName.split('.')[0], instance: directiveName.split('.')[1], value: undefined})\n    }\n\n    function selectDevice(newdevice) {\n        console.log('selected new device',newdevice)\n        var newitem={}\n        setPropMod(loadPropMod(propertyFromDirective(newdevice.capabilities[0].interface, directives(newdevice.capabilities[0].interface)[0])))\n        newitem={...props.item, instance: newdevice.capabilities[0].instance, name:newdevice.friendlyName, endpointId: newdevice.endpointId, controller:newdevice.capabilities[0], command:directives(newdevice.capabilities[0].interface)[0], value: undefined}\n        props.save(props.index, newitem)\n    }\n\n    function getCommand() {\n        if (props.item.command!==undefined) {\n            if (props.item.hasOwnProperty('instance') && props.item.instance!==undefined) {\n                return props.item.command+\".\"+props.item.instance\n            }\n            return props.item.command\n        }\n        return ''\n    }\n\n    return (\n        <GridItem nolist={true} elevation={0} wide={true} xs={12}>\n            <AutomationDevice   device={props.device} index={props.index} selectDevice={selectDevice} wide={props.wide}\n                                remove={props.remove} reorder={props.reorder}\n                                moveUp={props.moveUp} moveDown={props.moveDown} delete={props.delete} />\n            { props.device!==undefined &&\n                <Grid item xs={props.wide ? 12 : 4 } className={classes.flex} >\n                    <ListItem>\n                        <Select className={classes.wideSelect} value={getCommand()} onChange={(e) => handleChangeDirectiveName(e.target.value)} input={<BootstrapInput name=\"command\" id=\"command-select\" />} >\n                        { directives().map(action => \n                            <MenuItem key={props.device.endpointId+action} value={action}>{action}</MenuItem>\n                        )}\n                        </Select>\n                    </ListItem>\n                </Grid>\n            }\n            { props.device!==undefined &&\n                <Grid item xs={props.wide ? 12 : 4} className={classes.flex} >\n                    <ListItem >\n                        { interfaceobj ? \n                            renderSuspenseModule( interfaceProperty)\n                            : null\n                        }\n                    </ListItem>\n                </Grid>\n            }\n            { !props.wide && \n                <>\n                    { props.remove &&\n                        <ListItemSecondaryAction>\n                            <IconButton size=\"small\" onClick={() => props.delete(props.index)}><CloseIcon /></IconButton>     \n                        </ListItemSecondaryAction>\n                    }\n                    { props.reorder &&\n                        <ListItemSecondaryAction>\n                            { props.index > 0 &&\n                                <IconButton size=\"small\" onClick={() => props.moveUp(props.index)}><ExpandLessIcon /></IconButton>\n                            }\n                            <IconButton size=\"small\" onClick={() => props.moveDown(props.index)}><ExpandMoreIcon /></IconButton>\n                        </ListItemSecondaryAction>\n                    }\n                </>\n            }\n        </GridItem>\n    )\n}\n"],"sourceRoot":""}